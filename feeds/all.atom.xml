<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sonny's Blog</title><link href="https://sonnycruz.github.io/" rel="alternate"></link><link href="https://sonnycruz.github.io%5Cfeeds/all.atom.xml" rel="self"></link><id>https://sonnycruz.github.io/</id><updated>2019-05-20T03:55:00-05:00</updated><entry><title>End-to-End Data Analysis Project: Part 5. Data Exploration</title><link href="https://sonnycruz.github.io%5C2019/05/20/data-explore/" rel="alternate"></link><published>2019-05-20T03:55:00-05:00</published><updated>2019-05-20T03:55:00-05:00</updated><author><name>Sonny Torres</name></author><id>tag:sonnycruz.github.io\2019,2019-05-20:/05/20/data-explore/</id><summary type="html">&lt;p class="first last"&gt;Descriptive statistics and graphs.&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#recap-of-parts-1-4-data-wrangling" id="id3"&gt;&lt;strong&gt;Recap of Parts 1-4 Data Wrangling&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#data-science-is-80-data-preparation" id="id4"&gt;&lt;strong&gt;Data Science is 80% Data Preparation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#exploring-the-dataset" id="id5"&gt;&lt;strong&gt;Exploring the Dataset&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-number-of-rows-and-columns" id="id6"&gt;&lt;strong&gt;The Number of Rows and Columns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#column-names" id="id7"&gt;&lt;strong&gt;Column Names&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#null-values-per-column" id="id8"&gt;&lt;strong&gt;Null Values Per Column&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#column-datatypes" id="id9"&gt;&lt;strong&gt;Column Datatypes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bar-graph-for-different-property-types" id="id10"&gt;&lt;strong&gt;Bar Graph for Different Property Types&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="recap-of-parts-1-4-data-wrangling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;&lt;strong&gt;Recap of Parts 1-4 Data Wrangling&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I set out to refine, document and showcase my data scraping, combining, parsing, cleaning and analysis skills with Python. Now I have a complete dataset (a large feat, indeed, given the self-imposed constraints). Below I will recap the journey thus far.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sonnycruz.github.io/2018/12/23/Getting-Data/"&gt;Part 1 Getting Data&lt;/a&gt; : I didn't want to begin my blog with training wheels and write &amp;quot;I just copied and pasted the data from a website&amp;quot;. I wanted the dataset to be gathered from scratch! A fools errand? Not if you are practicing your programming skills. Is it worth creating a scraper in the real world? I guess it depends on the time it takes, the quantity and quality of the data and what it is used for. To gather the data, I used &lt;a class="reference external" href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;BeautifulSoup&lt;/a&gt; and &lt;a class="reference external" href="https://docs.python.org/3.7/library/re.html"&gt;Regular Expressions&lt;/a&gt; to scrape and gather various tables of CMBS loan data from an HTML file downloaded from this &lt;a class="reference external" href="https://www.sec.gov/Archives/edgar/data/1013611/000152153611000217/q1100154_fwpa1-jpm.htm"&gt;SEC webpage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/18/Parse-Headers/"&gt;Part 2 Parsing the Headers&lt;/a&gt;: In order to combine multiple header rows, spread across multiple CSV files, I had to load each header file, account for encoding differences between Python and the data source, account for duplicate header values, join a hierarchal index of header rows into a single header row, save and concatenate the results.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/23/Join-Stack/"&gt;Part 3 Join and Stack&lt;/a&gt;: The table data was joined and stacked horizontally and vertically to piece together the puzzle of data tables first explained in Part 1: Getting Data. Finally, the parsed header row was stacked on to the table data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sonnycruz.github.io/2019/05/04/More-Cleanup/"&gt;Part 4 More Cleanup&lt;/a&gt;:  Here, I got rid of annoying symbols and characters in the headers, deleted columns which contained all NA values and deleted duplicate columns (the repeated indices for each table on the web page).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="data-science-is-80-data-preparation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;&lt;strong&gt;Data Science is 80% Data Preparation&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is an axiom that states that 80% of a Data Scientist's time is spent acquiring, cleaning and preparing data. I believe this &lt;a class="reference external" href="https://www.forbes.com/sites/gilpress/2016/03/23/data-preparation-most-time-consuming-least-enjoyable-data-science-task-survey-says/#66511b2c6f63"&gt;Forbes article&lt;/a&gt; and the survey cited in the article, is the main source of this propagated rule of thumb. In my experience, the 80% rule is absolutely true and in some cases, like this project, data acquisition and cleaning is more like 90-95%.&lt;/p&gt;
&lt;p&gt;It is clear to see that, after 4 blog posts and many lines of code, that acquiring, parsing and joining data can certainly consume the majority of your time when working on a data project. Data preparation is loathed by some and is sometimes, kind of pejoratively, referred to as &amp;quot;janitorial work&amp;quot; (not that there is anything wrong with janitors. I think humans are decades away from producing a robot that can adequately clean a public restroom). However, I have encountered some profoundly complex and thought provoking challenges when working through the aforementioned &amp;quot;janitorial&amp;quot; data preparation stage (my previous 4 blog posts in particular!) and I feel that I have become a better programmer and data analyst for solving these data preparation problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exploring-the-dataset"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;&lt;strong&gt;Exploring the Dataset&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When exploring a dataset I like to use an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Interpreter_(computing)"&gt;interpreter&lt;/a&gt; and interact with the dataset. I used IPython to develop the code for this post, and appropriately the code for this section are meant to be typed at a Python interpreter, otherwise you will have to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;print([code])&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Below are the imports and settings modifications for Pandas to view more rows and columns in the interpreter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display.max_rows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display.max_columns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:\Users\Username\Desktop\End-to-End-Data-Analysis\1. Get the Data\table&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CMBS New Final.csv&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, you can assess the general quality of the data using the &lt;tt class="docutils literal"&gt;.head()&lt;/tt&gt; method in a Python interpreter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="df head4" src="/images/dfhead4.png" /&gt;
&lt;p&gt;Next, there are four components that &amp;quot;must know&amp;quot; characteristics for me for any dataset.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The number of columns and rows.&lt;/li&gt;
&lt;li&gt;The name of each column.&lt;/li&gt;
&lt;li&gt;The number of null values for each column.&lt;/li&gt;
&lt;li&gt;The datatypes of each column.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-number-of-rows-and-columns"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;The Number of Rows and Columns&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can access the Pandas' &lt;tt class="docutils literal"&gt;.shape&lt;/tt&gt; attribute and you will see a tuple containing the rows and columns in the format (rows, columns).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="df shape2" src="/images/dfshape2.png" style="width: 85%;" /&gt;
&lt;p&gt;or you can call the &lt;tt class="docutils literal"&gt;df.info()&lt;/tt&gt; method to get a little more information, such as memory usuage.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="df info" src="/images/dfinfo.png" style="width: 85%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="column-names"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;&lt;strong&gt;Column Names&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my experience with working with Pandas, indexing by column names is one of the most common operations. For example, I may index column names to change the column datatypes, combine columns, perform merge operations, rename columns and aggregate statistics. Below is one way to see all of the columns for a dataset.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="dfcolval" src="/images/dfcolval.png" style="width: 85%;" /&gt;
&lt;p&gt;However, recently I have preferred to save all of the column names to a text file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;indx_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tupl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;indx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tupl&lt;/span&gt;
      &lt;span class="n"&gt;indx_cols&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savetxt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmbs cols.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indx_cols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above, the empty list &lt;tt class="docutils literal"&gt;indx_cols&lt;/tt&gt; is the data container which will contain all of the column information.&lt;/p&gt;
&lt;p&gt;I then iterated over each tuple that &lt;tt class="docutils literal"&gt;enumerate&lt;/tt&gt; produces when passed &lt;tt class="docutils literal"&gt;df.columns.values&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The index and column values are then appended to the list &lt;tt class="docutils literal"&gt;indx_cols&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;np.savetxt&lt;/tt&gt; will save a text file with each column index number and column name, below.&lt;/p&gt;
&lt;p&gt;This way, you have a text file to refer to where you can highlight, copy and paste values when you are writing code that involves indexing long column names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="null-values-per-column"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;&lt;strong&gt;Null Values Per Column&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This particular dataset has many null values and because I wanted to gather descriptive statistics on columns that consider each data point, it was useful to know how many data points and missing data points (null values) there are per column.&lt;/p&gt;
&lt;p&gt;But first, I wanted to change the encoding (&lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/23/Join-Stack/"&gt;covered in this post&lt;/a&gt;) to make sure that the null values show up at all. I was reminded that I needed to encode these values to UTF-8 when I saw that there were &lt;em&gt;NO null values&lt;/em&gt;, which you can easily see is incorrect when opening the file in Excel. The null values were just read by Python (UTF-8 encoding) as string values that look like this: &lt;tt class="docutils literal"&gt;'\xa0 '&lt;/tt&gt;. I could just replace these strange looking string values with NA values, but I prefer to convert to Python's native encoding to avoid any other issues.&lt;/p&gt;
&lt;p&gt;Below will convert the the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Windows-1252"&gt;Windows-1252 or CP-1252&lt;/a&gt; encoded dataset into UTF-8 encoding, column by column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str_dtypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_dtypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;utf_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_dtypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;utf_encoded&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utf_encoded&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, in order to target &lt;em&gt;just the columns with string values&lt;/em&gt; (or 'object' as they are labeled) and not the columns of numerical data types I used the &lt;tt class="docutils literal"&gt;.select_dtypes&lt;/tt&gt; Pandas dataframe method. I select only the string columns because using &lt;tt class="docutils literal"&gt;.apply&lt;/tt&gt; on a Dataframe with a lambda function that is meant for only strings actually converts the numerical column to all null values.&lt;/p&gt;
&lt;p&gt;Next, I used Pandas' &lt;tt class="docutils literal"&gt;.apply&lt;/tt&gt; method and passed a lambda function where every &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; is a column that will have its &lt;tt class="docutils literal"&gt;.str.&lt;/tt&gt; attribute accessed and the &lt;tt class="docutils literal"&gt;normalize&lt;/tt&gt; method is used to convert the non-break space character into its correct character representation, a string value consisting of 3 spaces.&lt;/p&gt;
&lt;p&gt;Because I want these non-break space characters to show up as blanks, or null values, I call &lt;tt class="docutils literal"&gt;df.replace&lt;/tt&gt; so the string value &lt;tt class="docutils literal"&gt;'&amp;nbsp;&amp;nbsp; '&lt;/tt&gt; is replaced with null values.&lt;/p&gt;
&lt;p&gt;Now, I can call &lt;tt class="docutils literal"&gt;df.count()&lt;/tt&gt; and see how many non-null values there are in each column. Or, rather than viewing the raw number of values that are valid values per row, you can view the &lt;em&gt;percentage&lt;/em&gt; of values that are present in each column using the code below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[INSERT IMAGE HERE]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="column-datatypes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;&lt;strong&gt;Column Datatypes&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a convenient way to see what each column's datatype is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[INSERT IMAGE]&lt;/p&gt;
&lt;p&gt;Working with financial data, one of the most common datatype conversions I do is converting dollars and dates to usable, sortable data types. Below are two functions that I created to use for this purpose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[$,()%]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;date_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;infer_datetime_format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the &lt;tt class="docutils literal"&gt;currency&lt;/tt&gt; function will not only replace dollar symbols, parentheses and commas with empty strings but also the percent symbol - another symbol often seen in business and finance. See the documentation for Pandas' &lt;tt class="docutils literal"&gt;.replace&lt;/tt&gt; method &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.replace.html"&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;date_convert&lt;/tt&gt; function is a simple way to use the &lt;tt class="docutils literal"&gt;pd.to_datetime&lt;/tt&gt; Pandas method but is convenient shorthand. Surprisingly, the parameter and argument &lt;tt class="docutils literal"&gt;infer_datetime_format=True&lt;/tt&gt; speeds up an otherwise lengthy conversion process (i.e. '5/26/2018' a string, is converted to 2018-05-26, a sortable date). See the documentation for Pandas' &lt;tt class="docutils literal"&gt;.to_datetime&lt;/tt&gt; method &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will use both of these functions later in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bar-graph-for-different-property-types"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;&lt;strong&gt;Bar Graph for Different Property Types&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After assessing the basic characteristics of the data, you might want to produce some simple visualizations for a more intuitive understanding of the data, i.e. a histogram representing a distribution of values for some category or column.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://matplotlib.org/3.1.0/index.html"&gt;Matplotlib&lt;/a&gt;, Python's main graphing library, is notoriously low-level at times and like Regular Expressions often requires programmers to Google basic syntax, not to mention the more esoteric functionality of the libraries. Also like Regular Expressions, Matplotlib can be as simple or as complicated/customized as you want it to be.&lt;/p&gt;
&lt;p&gt;To make things more complicated, there are two different ways, or two interfaces, for Matplotlib. On his website, Data Scientist Jake Vanderplas artfully &lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/04.00-introduction-to-matplotlib.html#Two-Interfaces-for-the-Price-of-One"&gt;described&lt;/a&gt; how Matplotlib has a quick MATLAB-style interface and an object-oriented interface for more customizable graphs.&lt;/p&gt;
&lt;p&gt;The method of experimentation with Matplotlib that I found the most helpful was using the IPython shell coupled with its magic command &lt;tt class="docutils literal"&gt;%matplotlib&lt;/tt&gt;, so that I could see the changes to the graph in real time.&lt;/p&gt;
&lt;p&gt;Because it often took me many lines of code to produce, for example, a basic bar chart, I created a function with parameters that produces a customizable bar chart from a dictionary of data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmbs_bars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylim_low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylim_high&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_thousands&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;text_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text_c1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text_c2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seaborn-bright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;bar_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;darkblue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xtick_rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xtick_font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;large&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lightgray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grid_line_style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grid_line_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;grid_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

      &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;data_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;data_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_keys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;data_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bar_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xtick_rotation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xtick_font&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim_low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylim_high&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text_c2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_facecolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;facecolor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grid_line_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grid_line_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grid_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_axisbelow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y_thousands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_yaxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_major_formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FuncFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{:,}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
      &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above, are the 24 lines of code that I use to construct a bar chart from a dictionary. I summarized the esoteric matplotlib functions and include links for reference in the footnotes &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;. // Unlike using the graphing tool in Excel, where you can choose a series of templates and drop-down options, to customize a graph, with Matplotlib you have to create each component of the graph such as...&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.figure&lt;/tt&gt; instantiates the figure object.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;fig.add_subplot&lt;/tt&gt; creates a subplot (a blank square with a y &amp;amp; x axis).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.bar&lt;/tt&gt; creates a bar graph within the subplot. The subplot details provided to the function (all using parameter names I created in the cmbs_bars function) are the &lt;tt class="docutils literal"&gt;data_index&lt;/tt&gt; or the number of x-ticks, &lt;tt class="docutils literal"&gt;data_values&lt;/tt&gt; the quantity or y-values for each x-tick, &lt;tt class="docutils literal"&gt;align&lt;/tt&gt; which accepts 'center' or 'edge'&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.xticks&lt;/tt&gt; creates the x-axis lables (property types in this instance). &lt;tt class="docutils literal"&gt;data_index&lt;/tt&gt; is the location of the xticks, &lt;tt class="docutils literal"&gt;data_keys&lt;/tt&gt; are the actual lables (Hotel, Retail...etc.), &lt;tt class="docutils literal"&gt;rotation&lt;/tt&gt; will rotate the x-axis labels if desired and &lt;tt class="docutils literal"&gt;fontsize&lt;/tt&gt; will change the font size.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.set_ylim&lt;/tt&gt; allows the customization of the y-axis so that different ranges are visible.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now I can pass a dictionary of data containing categories and quantities and pass it to the bar chart function. Below is the dictionary of data I'll use for the bar chart, the dictionary passed to the function &lt;tt class="docutils literal"&gt;cmbs_bars&lt;/tt&gt; and finally the visual the function produces.&lt;/p&gt;
&lt;p&gt;[INSERT IMAGE]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;prop_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Property Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.style.use&lt;/tt&gt;: &lt;a class="reference external" href="https://matplotlib.org/3.1.0/tutorials/introductory/customizing.html"&gt;This method&lt;/a&gt; simply chooses an aesthetic palette for the graph.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.figure&lt;/tt&gt;: Creates the &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.figure.html"&gt;figure object&lt;/a&gt; that the graph will be constructed on.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;fig.add_subplot&lt;/tt&gt;: Creates a &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot"&gt;subplot&lt;/a&gt;, assigned to the variable &lt;tt class="docutils literal"&gt;ax1&lt;/tt&gt;, to the blank figure object. &lt;tt class="docutils literal"&gt;111&lt;/tt&gt; just means that the subplot is a 1 x 1 (one row, one column) blank plot and is the first (and only) plot. The &lt;tt class="docutils literal"&gt;111&lt;/tt&gt;'s make less sense when plotting one plot but make sense when constructing a 2 x 2 graph (four empty boxes) and selecting 3, the third box out of the four to edit.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.bar&lt;/tt&gt;: Method to use Matplotlib's &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.bar.html"&gt;bar chart&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.xticks&lt;/tt&gt;: Allows customization of the X-axis &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.xticks.html"&gt;tick&lt;/a&gt; marks and labels.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.set_ylim&lt;/tt&gt;: Configures the &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.set_ylim.html"&gt;limits&lt;/a&gt; for the Y-axis.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.ylabel&lt;/tt&gt;: The &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.ylabel.html"&gt;Y-axis label&lt;/a&gt; such as number of objects.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.text&lt;/tt&gt;: Add &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.text.html"&gt;text&lt;/a&gt; to plot.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plt.title&lt;/tt&gt;: Add &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.title.html"&gt;title&lt;/a&gt; to plot.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.set_facecolor&lt;/tt&gt;: Sets the &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.set_facecolor.html"&gt;facecolor&lt;/a&gt; to the axes (subplot).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.grid&lt;/tt&gt;: Configures the plot's &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.grid.html"&gt;grid lines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.set_axisbelow&lt;/tt&gt;: Passing True to the function will set the grid lines and tick marks in the &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.set_axisbelow.html"&gt;background&lt;/a&gt; (behind the bar figures in the graph).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ax1.get_yaxis.set_major_formatter(plt.FuncFormatter(lambda x, loc: &lt;span class="pre"&gt;&amp;quot;{:,}&amp;quot;.format(int(x))))&lt;/span&gt;&lt;/tt&gt;: Selects the &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.get_yaxis.html"&gt;y axis&lt;/a&gt; with &lt;tt class="docutils literal"&gt;get_yaxis&lt;/tt&gt;, formats the &lt;a class="reference external" href="https://matplotlib.org/3.1.0/gallery/ticks_and_spines/tick-formatters.html"&gt;major ticker&lt;/a&gt; on the y-axis with &lt;tt class="docutils literal"&gt;set_major_formatter&lt;/tt&gt;, utilizes &lt;tt class="docutils literal"&gt;plt.FuncFormatter&lt;/tt&gt; &lt;a class="reference external" href="https://matplotlib.org/3.1.0/api/ticker_api.html#matplotlib.ticker.FuncFormatter"&gt;formatting function&lt;/a&gt; which then utilizes a lambda function. See more ticker formatting at &lt;a class="reference external" href="https://www.programcreek.com/python/example/100920/matplotlib.ticker.FuncFormatter"&gt;Program Creek&lt;/a&gt;. The lambda function uses Python's &lt;a class="reference external" href="https://docs.python.org/3.4/library/string.html#format-string-syntax"&gt;string formatting syntax&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="tutorial"></category><category term="pandas"></category><category term="matplotlib"></category></entry><entry><title>End-to-End Data Analysis Project: Part 4. More Cleanup!?!</title><link href="https://sonnycruz.github.io%5C2019/05/04/More-Cleanup/" rel="alternate"></link><published>2019-05-04T04:15:00-05:00</published><updated>2019-05-04T04:15:00-05:00</updated><author><name>Sonny Torres</name></author><id>tag:sonnycruz.github.io\2019,2019-05-04:/05/04/More-Cleanup/</id><summary type="html">&lt;p class="first last"&gt;Merging all disparate files and refining final dataset.&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#recap-of-part-3" id="id1"&gt;&lt;strong&gt;Recap of Part 3&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#return-of-the-headers" id="id2"&gt;&lt;strong&gt;Return of the Headers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#weapon-of-choice" id="id3"&gt;&lt;strong&gt;Weapon of Choice&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-code" id="id4"&gt;&lt;strong&gt;The Code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-headers-before" id="id5"&gt;&lt;strong&gt;The Headers: Before&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#delete-duplicate-columns" id="id6"&gt;&lt;strong&gt;Delete Duplicate Columns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#clean-up-headers-again" id="id7"&gt;&lt;strong&gt;Clean Up Headers (again)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#delete-columns-with-all-na-values" id="id8"&gt;&lt;strong&gt;Delete Columns with All NA Values&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#headers-after" id="id9"&gt;&lt;strong&gt;Headers: After&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="recap-of-part-3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;&lt;strong&gt;Recap of Part 3&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The CMBS Loan data has been &lt;a class="reference external" href="https://sonnycruz.github.io/2018/12/23/Getting-Data/"&gt;scraped&lt;/a&gt;, the headers have been &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/18/Parse-Headers/"&gt;parsed&lt;/a&gt;, the tables and headers have been &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/23/Join-Stack/"&gt;joined&lt;/a&gt; and we can now refine the final dataset that will be used for analysis. Thanks to the meticulous extraction and parsing of the data thus far, there are only minor refinements left to do - most of which are just out of preference and for convenience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="return-of-the-headers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;&lt;strong&gt;Return of the Headers&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After an entire &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/18/Parse-Headers/"&gt;post&lt;/a&gt; was dedicated entirely to parsing header data, there are still some ways that the headers could be better. It is important to be able to access columns with as much convenience and ease as possible since indexing by column name is one of the most common operations used while working with data with the Pandas library. Below are the minor changes I will make to the headers and, in some cases, entire columns.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fix inconsistent spacing in headers.&lt;/li&gt;
&lt;li&gt;Delete unnecessary symbols and parenthesis.&lt;/li&gt;
&lt;li&gt;Delete duplicate columns.&lt;/li&gt;
&lt;li&gt;Delete columns that are completely empty.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="weapon-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;&lt;strong&gt;Weapon of Choice&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since much of cleaning that I want to do involves parsing and locating string patterns, I will be utilizing &lt;a class="reference external" href="https://docs.python.org/3/library/re.html"&gt;Regular Expressions&lt;/a&gt; in conjunction with the &lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;&lt;strong&gt;The Code&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is code that I will be covering in this post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;main_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:\Users\Username\Desktop\End-to-End-Data-Analysis\1. Get the Data\table&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CMBS Table.csv&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cmbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Delete extra Loan &amp;amp; Seller columns&lt;/span&gt;
&lt;span class="n"&gt;loan_seller_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(^Loan\s#|^Seller|^Property\sName)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;loan_seller_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Regex to edit headers&lt;/span&gt;
&lt;span class="n"&gt;regex_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_\d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\(.+\)+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\s\s+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^\s+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\s+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;regex_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Delete&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMBS Final.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-headers-before"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;&lt;strong&gt;The Headers: Before&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Loading the CSV file produced in &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/23/Join-Stack/"&gt;Post 3&lt;/a&gt; and calling &lt;tt class="docutils literal"&gt;print(cmbs.columns.values)&lt;/tt&gt; outputs the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Loan #&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Street Address&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;City&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;State&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Zip Code&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;County&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Number of Properties&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property_2 Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Property_9 Subtype&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Year Built&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Year Renovated&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #.1&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Seller(1).1&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name.1&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Units(2)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit of  Measure&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Occupancy %&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Occupancy Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Appraised Value ($)(3)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Appraisal Date(3)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Current_4 LTV %(3)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Original Balance ($)(4)_7&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Original Balance_4 per Unit ($)_9&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Current_9 Balance ($)(4)_1&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Current Balance_0 per Unit ($)_8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;% o&lt;/span&gt;&lt;span class="s1"&gt;f Initial Pool Balance&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Crossed Loan&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Related Borrower(5)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Interest Rate %(6)_9&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Admin. Fee %(6)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Net Mortgage Rate %(6)_2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Accrual Type&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #.2&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Seller(1).2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name.2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly Debt Service ($)(7)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Annual Debt Service ($)(8)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Note Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;First Payment Date(9)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Partial IO Last IO Payment&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Partial IO Loan First P&amp;amp;I Payment&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Rem._3  Term(9)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rem._8  Amort&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;I/O Period(9)(10)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seasoning&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Payment Due Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Grace Period_4  (Late Payment)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Grace Period_4  (Default)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Maturity Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ARD Loan(11)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Final Mat Date(11)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Maturity/ARD Balance ($)(4)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Maturity LTV %(3)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Loan #.3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1).3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name.3&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Prepayment Provision (Payments)(9)(12)(13)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008_7 Revenues ($)_9&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2008_0 Total Expenses ($)_5&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008_4 NOI ($)_5&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009_2 Revenues ($)_2&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2009_3 Total Expenses ($)_9&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009_0 NOI ($)_8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010_3 Revenues ($)_7&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2010_5 Total Expenses ($)_6&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010_6 NOI ($)_0&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Most Recent_3  Revenues ($)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent_1  Total Expenses ($)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Most Recent_9  NOI ($)(14)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;As of&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #.4&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1).4&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Property Name.4&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW Economic Occupancy %&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW_8 Revenues ($)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW Total Expenses ($)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NOI ($)(14)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW_8  Capital Items ($)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW NCF ($)(14)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW_7  NOI DSCR(14)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NCF_7 DSCR(14)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW NOI Debt Yield %&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NCF_5  Debt Yield %&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Title Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Ground Lease_9  Expiration&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ground Lease_6  Extension Terms&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PML %&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Loan #.5&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1).5&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name.5&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront Capex Reserve ($)_6&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Upfront Engin. Reserve ($)_2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront Envir.  Reserve ($)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Upfront TI/LC Reserve ($)_4&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront RE Tax Reserve ($)_8&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Upfront Ins. Reserve ($)_7&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront Other Reserve ($)_3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unnamed: 99&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Monthly Capex Reserve ($)_0&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly Envir. Reserve ($)_0&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Monthly TI/LC Reserve ($)_2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly RE Tax Reserve ($)_3&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Monthly Ins. Reserve ($)_2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly Other Reserve ($)_0&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #.6&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Seller(1).6&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name.6&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Capex  Reserve Cap ($)_3&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Envir.  Reserve Cap ($)_8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TI/LC  Reserve Cap ($)_3&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;RE Tax  Reserve Cap ($)_7&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Insur.  Reserve Cap ($)_5&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Debt Service  Reserve Cap ($)_3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Other  Reserve Cap ($)_8&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Unnamed: 10_level_1&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Single Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size_8&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Lease_6 Expiration_3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unnamed: 121&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2nd Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size_9&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Lease_5 Expiration_1&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #.7&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1).7&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name.7&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;3rd Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size_4&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lease_9 Expiration_2&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unnamed: 131&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;4th Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size_5&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lease_3 Expiration_8&amp;#39;&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;( &amp;#39;     &amp;#39; ,   &amp;#39;     &amp;#39; ) . 1&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5th Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size_6&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Lease_5 Expiration_3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan Purpose&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #.8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1).8&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Property Name.8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Principal / Carveout Guarantor(20)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lockbox_1  (Y/N)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Lockbox_3  Type(21)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Additional Debt_2  Permitted (Y/N)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Additional Debt_0  Exist (Y/N)(22)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Additional Debt_7  Amount ($)(22)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Additional Debt_6  Type(22)&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Total Debt_5 Current Balance ($)&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Total Debt_9  UW NCF  DSCR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Total Debt Current LTV %&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Total Debt_0  UW NOI  Debt Yield %&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #_3&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller(1).9&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Property Name.9&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008_0 Occupancy %_8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008_4  ADR ($)_9&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2008_2  RevPAR ($)_8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009_9  Occupancy %_9&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009_9  ADR ($)_7&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2009_8  RevPAR ($)_6&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010_3  Occupancy %_0&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010_1  ADR ($)_6&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2010_6  RevPAR ($)_4&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent_2  Occupancy %_3&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Most Recent_5  ADR ($)_6&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent_1  RevPAR ($)_6&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW_1 Occupancy %_0&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW_8  ADR ($)_9&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW_5  RevPAR ($)_8&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Loan #_7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a number of duplicate columns, numbers appended to column names and other messy symbols that can be deleted. Deleting the various symbols and duplicate columns is relatively easy when utilizing Regular Expressions and iterating over each header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delete-duplicate-columns"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;Delete Duplicate Columns&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The duplicate columns stem from the fact that my data source was arranged such that each table of data always contained three specific columns &lt;em&gt;(Loan, Seller &amp;amp; Property Name)&lt;/em&gt;. Rather than deleting each observation individually, I decided to create a list of duplicate column names to iterate over which would be used to identify the various columns I want to delete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loan_seller_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(^Loan\s#|^Seller|^Property\sName)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The list comprehension above creates a list of columns by iterating over every column in the dataframe and appending to the list the column names that are one of the three repeated columns.
The Regular Expression pattern is a group of three individual regex patterns separated &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; meaning &amp;quot;or&amp;quot;. So, if a given column starts with (&lt;tt class="docutils literal"&gt;^&lt;/tt&gt; the carrot indicating the pattern is at the beginning of a string) &amp;quot;Loan #&amp;quot;, or &amp;quot;Seller&amp;quot; or &amp;quot;Property Name&amp;quot;, the column value is returned if &lt;tt class="docutils literal"&gt;re.search&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;, meaning one of the three subject columns have been found.
An important note is that I did not want to delete &lt;em&gt;all&lt;/em&gt; columns that matches with this pattern. Indexing the list with &lt;tt class="docutils literal"&gt;[3:]&lt;/tt&gt; skips the first three values because those first three observations of &amp;quot;Loan&amp;quot;, &amp;quot;Seller&amp;quot;, &amp;quot;Property Name&amp;quot; are the &lt;em&gt;good&lt;/em&gt; columns I wanted to keep.
Below, I used a &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop to iterate over the duplicate columns to delete.&lt;/p&gt;
&lt;p&gt;FOR LOOP&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;loan_seller_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Specifying &lt;tt class="docutils literal"&gt;axis=1&lt;/tt&gt; will cause the columns to be dropped and &lt;tt class="docutils literal"&gt;inplace=True&lt;/tt&gt; ensures that the deletions are permanent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clean-up-headers-again"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;&lt;strong&gt;Clean Up Headers (again)&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many ways to creatively use Regular Expressions to complete a given task. I used a dictionary of Regular Expressions patterns with patterns to identify as the dictionary keys and the respective dictionary values were the strings I wanted to replace the matched word with. I got the idea from &lt;a class="reference external" href="http://code.activestate.com/recipes/81330-single-pass-multiple-replace/"&gt;this code&lt;/a&gt; I found and made a more elementary version of it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;regex_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_\d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\(.+\)+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\s\s+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^\s+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\s+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The regex patterns above are explained below.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;'_\d'&lt;/tt&gt; an underscore immediately followed by an numerical digit.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'\(.+\)+'&lt;/span&gt;&lt;/tt&gt; parentheses containing one or more characters inside them.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;'#'&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;'%'&lt;/tt&gt; literal matches of the hashtag and percent symbols.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\/'&lt;/span&gt;&lt;/tt&gt; forward slash.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;'\s\s+'&lt;/tt&gt; a space followed by one or more spaces.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;^\s+'&lt;/tt&gt; any space occuring one or more times at the beginning of a string.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'\s+?'&lt;/span&gt;&lt;/tt&gt; any space occuring one or more times at the end of a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, I can iterate over the dictionary &lt;tt class="docutils literal"&gt;regex_dict&lt;/tt&gt; to output and use each dictionary key (the regex pattern) and value (the replacement strings)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;regex_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop modifies all columns slightly for each iteration until every regex pattern in the dictionary has been located in the headers and then replaced with replaced with an empty string. All of the replacement values are an empty string except for the one for &lt;tt class="docutils literal"&gt;\s\s+&lt;/tt&gt; which is replaced by a single space because I want to preserve spaces, I just don't want to have inconsistent spacing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delete-columns-with-all-na-values"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;&lt;strong&gt;Delete Columns with All NA Values&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As covered in my &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/18/Parse-Headers/"&gt;second post&lt;/a&gt;, the data I scraped is encoded using the Windows-1252 encoding and Python's default encoding is UTF-8. So, in order to recognize columns which are entirely filled with &amp;quot;NA&amp;quot; values, the column values must be normalized for Unicode first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the &amp;quot;NA&amp;quot; values I am looking for are not actually NA values but non-breaking space characters which, when normalized for Unicode, appear as two single spaces &lt;tt class="docutils literal"&gt;'&amp;nbsp; '&lt;/tt&gt;, the columns I am looking to delete are completely filled with these double-spaced strings.
The Pandas library has this really cool feature called &amp;quot;Method Chaining&amp;quot; where you can apply a series of transformations to a dataset by &amp;quot;chaining&amp;quot; multiple Class methods together. So, by calling &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.str.normalize('NFKD').str.match('&lt;/span&gt;&amp;nbsp; &lt;span class="pre"&gt;').all()&lt;/span&gt;&lt;/tt&gt; on a given column, I can normalize the column to Unicode, search for string matches and produce a True if all of the column values match the double-space string pattern.
The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop is organized by the &lt;tt class="docutils literal"&gt;try&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; Python control flow because not all column values are loaded as strings by default and Python produces an &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt; when a program tries to normalize a non-string object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="headers-after"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;&lt;strong&gt;Headers: After&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now calling &lt;tt class="docutils literal"&gt;print(cmbs.columns.values)&lt;/tt&gt; will produce:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Loan&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Name&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Street Address&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;City&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;State&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Zip Code&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;County&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Number of Properties&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Property Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Property Subtype&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Year Built&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Year Renovated&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Units&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Unit of Measure&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Occupancy&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Occupancy Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Appraised Value&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Appraisal Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Current LTV&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Original Balance&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Original Balance per Unit&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Current Balance&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Current Balance per Unit&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;of Initial Pool Balance&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Crossed Loan&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Related Borrower&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Interest Rate&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Admin. Fee&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Net Mortgage Rate&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Accrual Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Monthly Debt Service&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Annual Debt Service&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Note Date&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;First Payment Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Partial IO Last IO Payment&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Partial IO Loan First P&amp;amp;I Payment&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rem. Term&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rem. Amort&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;IO Period&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Seasoning&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Payment Due Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Grace Period&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Grace Period&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Maturity Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ARD Loan&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Final Mat Date&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MaturityARD Balance&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Maturity LTV&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Prepayment Provision&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008 Revenues&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2008 Total Expenses&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008 NOI&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 Revenues&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 Total Expenses&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2009 NOI&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010 Revenues&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010 Total Expenses&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010 NOI&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Most Recent Revenues&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent Total Expenses&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent NOI&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;As of&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW Economic Occupancy&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW Revenues&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW Total Expenses&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW NOI&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW Capital Items&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NCF&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NOI DSCR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NCF DSCR&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW NOI Debt Yield&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW NCF Debt Yield&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Title Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Ground Lease Expiration&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ground Lease Extension Terms&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PML&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Upfront Capex Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront Engin. Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront Envir. Reserve&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Upfront TILC Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront RE Tax Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Upfront Ins. Reserve&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Upfront Other Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly Capex Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly Envir. Reserve&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Monthly TILC Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly RE Tax Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monthly Ins. Reserve&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Monthly Other Reserve&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Capex Reserve Cap&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TILC Reserve Cap&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Single Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lease Expiration&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2nd Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lease Expiration&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3rd Largest Tenant&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Unit Size&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lease Expiration&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4th Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Lease Expiration&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5th Largest Tenant&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unit Size&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lease Expiration&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Loan Purpose&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Principal Carveout Guarantor&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lockbox&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lockbox Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Additional Debt Permitted&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Additional Debt Exist&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Additional Debt Amount&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Additional Debt Type&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Total Debt Current Balance&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Total Debt UW NCF DSCR&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Total Debt Current LTV&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Total Debt UW NOI Debt Yield&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008 Occupancy&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2008 ADR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2008 RevPAR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 Occupancy&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 ADR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2009 RevPAR&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;2010 Occupancy&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010 ADR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2010 RevPAR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent Occupancy&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Most Recent ADR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Most Recent RevPAR&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW Occupancy&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UW ADR&amp;#39;&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;UW RevPAR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The duplciate columns are gone, the annoying symbols are gone and the data is generally much cleaner. Next, I will... &lt;em&gt;actually&lt;/em&gt; begin analyzing the data.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="tutorial"></category></entry><entry><title>End-to-End Data Analysis Project: Part 3. Join and Stack</title><link href="https://sonnycruz.github.io%5C2019/04/23/Join-Stack/" rel="alternate"></link><published>2019-04-23T20:49:00-05:00</published><updated>2019-04-23T20:49:00-05:00</updated><author><name>Sonny Torres</name></author><id>tag:sonnycruz.github.io\2019,2019-04-23:/04/23/Join-Stack/</id><summary type="html">&lt;p class="first last"&gt;Joining all disparate files and creating the final dataset.&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#recap-of-part-1-2" id="id1"&gt;&lt;strong&gt;Recap of Part 1 &amp;amp; 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#join-tables-stack-the-headers" id="id2"&gt;&lt;strong&gt;Join Tables &amp;amp; Stack the Headers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-code-to-concatenate-and-join-the-data" id="id3"&gt;&lt;strong&gt;The Code to Concatenate and Join the Data&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#header-vs-not-header" id="id4"&gt;&lt;strong&gt;header vs. &amp;quot;Not Header&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#blank-rows-function" id="id5"&gt;&lt;strong&gt;blank_rows function&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#iterate-table-files" id="id6"&gt;&lt;strong&gt;Iterate Table Files&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#join-and-stack" id="id7"&gt;&lt;strong&gt;Join and Stack&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-the-final-dataframe" id="id8"&gt;&lt;strong&gt;Create the Final Dataframe&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="recap-of-part-1-2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;&lt;strong&gt;Recap of Part 1 &amp;amp; 2&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After scraping all of the CMBS loan data from the &lt;a class="reference external" href="https://www.sec.gov/Archives/edgar/data/1013611/000152153611000217/q1100154_fwpa1-jpm.htm"&gt;SEC.gov website&lt;/a&gt; (shown in my &lt;a class="reference external" href="https://sonnycruz.github.io/2018/12/23/Getting-Data/"&gt;first post&lt;/a&gt;) and parsing the unwieldy header data (see my &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/18/Parse-Headers/"&gt;previous post&lt;/a&gt;), I now have to join all of the table data (which are saved as a bunch of CSV files) pieces and save the data as one CSV file. After joining all of the disparate data pieces the final data set will be one table and the data will &lt;em&gt;almost&lt;/em&gt; be ready for analysis..&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="join-tables-stack-the-headers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;&lt;strong&gt;Join Tables &amp;amp; Stack the Headers&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is an illustration that describes the join operations I will explain in this post.&lt;/p&gt;
&lt;img alt="all tables numbered" src="/images/all_table_join.jpg" /&gt;
&lt;p&gt;The two main components of this data are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;The Headers&lt;/strong&gt;: The header data, once a disparate group of files, now exist as a single row of data in a single CSV file. The single header row continues to the right for every header in the dataset.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Tables&lt;/strong&gt;: Because SEC web page presented one large dataset as disjoined panels arranged in a continuous online scroll, the disparate tables need to be concatenated horizontally &lt;em&gt;and&lt;/em&gt; vertically back together. The &amp;quot;Prop1, Prop2...&amp;quot; indices are an accurate but simplified representation of how the tables need to be coherently joined together. The entirety of the table data can be thought of as sections of fours, as seen in the image above, that continue right all the way until the end of the dataset.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code-to-concatenate-and-join-the-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;&lt;strong&gt;The Code to Concatenate and Join the Data&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unicodedata&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;main_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\Users\Username\Desktop\End-to-End-Data-Analysis\1. Get the Data\table&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;parsed_header_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\Users\Username\Desktop\End-to-End-Data-Analysis\1. Get the Data\header\frame.csv&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*table.csv&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;all_table_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="n"&gt;number_of_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_table_files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df_top_half&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;df_bottom_half&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;blank_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# selects first column, changes type to string,&lt;/span&gt;
    &lt;span class="c1"&gt;# initial type is object&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;blank_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\s+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tup&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tup&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number_of_files&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; table.csv&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;blank_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;df_top_half&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;df_bottom_half&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;join_frames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_of_frames&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# horizontal join of dataframes&lt;/span&gt;
    &lt;span class="n"&gt;concat_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_frames&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;concat_df&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;final_stack_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;top_tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;join_frames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bottom_tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;join_frames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;top_tables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom_tables&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt;

&lt;span class="n"&gt;cmbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;final_stack_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_top_half&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_bottom_half&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_header_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMBS Table.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The overall code structure (i.e. many helper functions to process data in CSV files) is similar to my previous post where I parsed the header data. Luckily, the table data is far less complicated and requires just one parsing function, &lt;tt class="docutils literal"&gt;blank_rows&lt;/tt&gt;, while the rest of the script is simply appending the top half of the table to one list and the bottom half of the table to another list. In the table illustration shown earlier in this post, tables 1 and 2 would be the &amp;quot;top half&amp;quot; and tables 3 and 4 would be the &amp;quot;bottom half&amp;quot;.&lt;/p&gt;
&lt;p&gt;Because I have elaborated on similar code in Posts 1 &amp;amp; 2, I will break down the functionality of the code starting with the &lt;tt class="docutils literal"&gt;blank_rows&lt;/tt&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="header-vs-not-header"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;&lt;strong&gt;header vs. &amp;quot;Not Header&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my first post, the code was structured so that, with carefully considered criteria, a single header row would be identifiable and distinguished from other rows. For &lt;em&gt;all&lt;/em&gt; other rows that didn't meet the special header criteria, they were considered table data and organized as such. However, in the HTML file, there are a few rows which are neither Had my code been built to recognize header &lt;em&gt;and&lt;/em&gt; table data ( &lt;strong&gt;IS HEADER&lt;/strong&gt; and &lt;strong&gt;IS NOT HEADER&lt;/strong&gt; does not mean &lt;strong&gt;IS TABLE DATA&lt;/strong&gt;), I would not have to delete blank rows in the table data CSV files.&lt;/p&gt;
&lt;p&gt;The blank lines are a result of hierarchal indexing that occurs on some of the header data where there is a hierarchal index, a blank row and then the header data (see image below).&lt;/p&gt;
&lt;img alt="blank row" src="/images/hierarch_blank_row.JPG" /&gt;
&lt;p&gt;So the goal for the &lt;tt class="docutils literal"&gt;blank_rows&lt;/tt&gt; function is to identify if the first row, and only first row, is blank. If the first row is blank, that means the &lt;strong&gt;not header&lt;/strong&gt;/blank row in the image above was saved to a table data CSV as if it were indeed table data. Due to some encoding inconsistencies, covered in &lt;a class="reference external" href="https://sonnycruz.github.io/2019/04/18/Parse-Headers/"&gt;Part 2&lt;/a&gt;, even finding a blank row requires a little more work than a binary True or False.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Blank rows are not actually blank rows. Due to encoding differences between Python's default encoding (UTF-8) and the website's encoding (Windows-1252), the &amp;quot;blank&amp;quot; rows actually contain a character called a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Non-breaking_space"&gt;non-breaking space character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In order to identify the non-breaking space character as a blank string, the data must be normalized to Unicode.&lt;/li&gt;
&lt;li&gt;In order to normalize the data, the data must be of type string.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3 facts above, as well as the fact that the very top left element/cell of every table is consistent and will never be blank for a valid table row was considered when making the &lt;tt class="docutils literal"&gt;blank_rows&lt;/tt&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="blank-rows-function"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;&lt;strong&gt;blank_rows function&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;blank_rows&lt;/tt&gt; function below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;blank_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;blank_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\s+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tup&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tup&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function... accepts a dataframe with the &lt;tt class="docutils literal"&gt;df&lt;/tt&gt; parameter and then immediately indexes the first column of the dataframe, converts the datatype to string and maps the &lt;tt class="docutils literal"&gt;unicode.normalize&lt;/tt&gt; method to each element in the series (column). &lt;strong&gt;Important note&lt;/strong&gt;, you can only access the first column in a Pandas Dataframe with &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; because the Dataframe object was loaded with the &lt;tt class="docutils literal"&gt;pd.csv&lt;/tt&gt; parameter &lt;tt class="docutils literal"&gt;header&lt;/tt&gt; equal to &lt;tt class="docutils literal"&gt;None&lt;/tt&gt;, meaning the headers default to integers.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;blank_match&lt;/tt&gt; variable saves a Regular Expression object that matches whitespace (space, tab, newline) characters.&lt;/li&gt;
&lt;li&gt;The list comprehension utilizes the &lt;tt class="docutils literal"&gt;.iteritems()&lt;/tt&gt; method to create a list of tuples that contain the row index and their respective column values.&lt;/li&gt;
&lt;li&gt;Next, a &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop, iterates over the tuple values in the list &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; and if a whitespace character is identified in a given row, the entire row is dropped.&lt;/li&gt;
&lt;li&gt;The row index values do not change when a row is deleted, the index would then have &amp;quot;missing&amp;quot; index values. The missing index values are only a problem because I will be concatenating the tables together and by default, the concatenation takes place along the row axes. The row indices are reset using the &lt;tt class="docutils literal"&gt;.reset_index&lt;/tt&gt; method and the index with the &amp;quot;missing&amp;quot; index values is deleted with &lt;tt class="docutils literal"&gt;.drop&lt;/tt&gt; as it has become an uncessary column after reseting the index.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="iterate-table-files"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;Iterate Table Files&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The directory with the table files, created in &lt;a class="reference external" href="https://sonnycruz.github.io/2018/12/23/Getting-Data/"&gt;Part 1&lt;/a&gt;, should have produced a directory containing all of the table files like the image below.&lt;/p&gt;
&lt;img alt="all table files" src="/images/generated_tables.JPG" /&gt;
&lt;p&gt;The code below iterates over each file in the directory, appending the even numbered files to the &lt;tt class="docutils literal"&gt;df_top_half&lt;/tt&gt; list and appending the odd numbered tables to the &lt;tt class="docutils literal"&gt;df_bottom_half&lt;/tt&gt; list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number_of_files&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; table.csv&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;blank_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;df_top_half&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;df_bottom_half&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;range&lt;/tt&gt; function produces a consistent range of numbers from 0 to the number of files that we want to iterate over.&lt;/li&gt;
&lt;li&gt;Because our filenames are read as strings, simply iterating over &lt;tt class="docutils literal"&gt;num&lt;/tt&gt; to grab each file in a sequential order does not work. The files would be iterated over out of order because table 10 would be read after table 1. This is why I used the variable &lt;tt class="docutils literal"&gt;file&lt;/tt&gt; to create a consistent file order that would be read. By converting the sequentially produced integers produced by the range function and converting them to a string, the files will be read in the correct order.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pd.read_csv&lt;/tt&gt; is utilized in the next line of the code. Without &lt;tt class="docutils literal"&gt;encoding&lt;/tt&gt; set to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'ISO-8859-1'&lt;/span&gt;&lt;/tt&gt; the files could not be read at all due to their encoding differences.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;header=None&lt;/tt&gt; ensures that any blank rows at the top of the file will not default to the header values when being loaded with &lt;tt class="docutils literal"&gt;pd.read_csv&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;if num % 2 == 0&lt;/tt&gt; uses the &lt;a class="reference external" href="https://python-reference.readthedocs.io/en/latest/docs/operators/modulus.html"&gt;modulus&lt;/a&gt; python operator which divides two numbers and outputs the remainder. So, if when dividing &lt;tt class="docutils literal"&gt;num&lt;/tt&gt; by 2, the remainder is equal to 0, then the condition is satified. That condition is being an even-numbered table which means it will be appended to the &lt;tt class="docutils literal"&gt;df_top_half&lt;/tt&gt; list which contains the top half of the large table we are concatenating.&lt;/li&gt;
&lt;li&gt;If the table is not an even-numbered table, it is odd and therefore going to be appended to the bottom half list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="join-and-stack"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;&lt;strong&gt;Join and Stack&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, now that the tools for processing the table files are ready, we can concatenate and stack all of the tables. Again, refer to the image presented earlier.&lt;/p&gt;
&lt;img alt="all tables numbered" src="/images/all_table_join.jpg" /&gt;
&lt;p&gt;The lists &lt;tt class="docutils literal"&gt;df_top_half&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;df_bottom_half&lt;/tt&gt; have lists of dataframes for the top and bottom half of the large table we are building. &lt;tt class="docutils literal"&gt;join_frames&lt;/tt&gt;, the function below, simply horizontally joins the lists in the top half together to create one dataframe and does the same to the bottom half. So tables 0, 2, 4, 6, 8... would be just one table and tables 1, 3, 5, 7, 9... will be another table.&lt;/p&gt;
&lt;p&gt;The function below concatenates the tables this way. &lt;tt class="docutils literal"&gt;axis=1&lt;/tt&gt; ensures that the tables will be concatenated along the first axis, which can be thought of as &amp;quot;across the columns&amp;quot;, while the 0 axis can be thought of as navigating &amp;quot;down the rows&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;join_frames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_of_frames&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# horizontal join of dataframes&lt;/span&gt;
    &lt;span class="n"&gt;concat_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_frames&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;concat_df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next function below simply applies the &lt;tt class="docutils literal"&gt;join_frames&lt;/tt&gt; function and then finally stacks the top half and bottom halves together.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;final_stack_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;top_tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;join_frames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bottom_tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;join_frames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;top_tables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom_tables&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This time, the &lt;tt class="docutils literal"&gt;pd.concat&lt;/tt&gt; function's parameter &lt;tt class="docutils literal"&gt;axis&lt;/tt&gt; is set to 0 to specify that the tables will be stacked vertically.&lt;/li&gt;
&lt;li&gt;The previously parsed headers file is loaded as a dataframe and its columns are accessed with the &lt;tt class="docutils literal"&gt;headers.columns&lt;/tt&gt; attribute. The newly joined and stacked table data dataframe is assigned the headers from the headers file that was just loaded.&lt;/li&gt;
&lt;li&gt;Finally, the resultant dataframe is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-final-dataframe"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;&lt;strong&gt;Create the Final Dataframe&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, final dataframe is created by utilizing the &lt;tt class="docutils literal"&gt;final_stack_df&lt;/tt&gt; function and then saving the resultant dataframe to a CSV.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;final_stack_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_top_half&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_bottom_half&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_header_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cmbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMBS Table.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the next post, I will refine and clean up the final dataset in order for it to be ready for analysis.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="tutorial"></category></entry><entry><title>End-to-End Data Analysis Project: Part 2. Parsing the Headers</title><link href="https://sonnycruz.github.io%5C2019/04/18/Parse-Headers/" rel="alternate"></link><published>2019-04-18T12:41:00-05:00</published><updated>2019-04-18T12:41:00-05:00</updated><author><name>Sonny Torres</name></author><id>tag:sonnycruz.github.io\2019,2019-04-18:/04/18/Parse-Headers/</id><summary type="html">&lt;p class="first last"&gt;Parsing the file headers&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#recap-of-part-1" id="id1"&gt;&lt;strong&gt;Recap of Part 1:&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-code-for-part-2" id="id2"&gt;&lt;strong&gt;The Code for Part 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#load-the-libraries-and-set-file-path" id="id3"&gt;&lt;strong&gt;Load the Libraries and Set File Path&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-header-parser-function" id="id4"&gt;&lt;strong&gt;The Header Parser function&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-encoding-problem" id="id5"&gt;&lt;strong&gt;The Encoding Problem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#account-for-duplicate-values-in-headers" id="id6"&gt;&lt;strong&gt;Account for Duplicate Values in Headers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="recap-of-part-1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;&lt;strong&gt;Recap of Part 1:&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In my &lt;a class="reference external" href="https://sonnycruz.github.io/2018/12/23/Getting-Data/"&gt;previous post&lt;/a&gt; I explained and showed how I scraped CMBS loan data from the &lt;a class="reference external" href="https://www.sec.gov/Archives/edgar/data/1013611/000152153611000217/q1100154_fwpa1-jpm.htm"&gt;SEC.gov website&lt;/a&gt; in order to refine my web scraping skills and acquire a dataset that was copyright free. Another practical advantage of this dataset is that it is incredibly messy and requires cleaning up before any kind of analysis can be done.&lt;/p&gt;
&lt;p&gt;After the numerous HTML tables were scraped for their header data and table data, I saved each table and table header to a CSV file. Now I have two folders, one for headers and one for tables, full of csv files. Below is an image of the &amp;quot;headers&amp;quot; folder the script in my previous post created as well as all of the header files that were moved to it.&lt;/p&gt;
&lt;img alt="header files" src="/images/files_in_header_folder.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code-for-part-2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;&lt;strong&gt;The Code for Part 2&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is all of the code that parses the header data and that I will be covering in this blog post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unicodedata&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;main_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\Users\Username\Desktop\End to End Data Analysis Project\header&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*header.csv&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;all_header_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;header_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;header_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_line&lt;/span&gt;
        &lt;span class="n"&gt;header_rows&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;main_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;main_header_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;word_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;word_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word_text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row_ind&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;word_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parsed&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
                     &lt;span class="n"&gt;na_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;

&lt;span class="n"&gt;all_header_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; header.csv&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;all_header_values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_header_values&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frame.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="load-the-libraries-and-set-file-path"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;&lt;strong&gt;Load the Libraries and Set File Path&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are the python libraries necessary to run the script. The &lt;tt class="docutils literal"&gt;main_dir&lt;/tt&gt; variable is the path to the folder that contains the CSV header files as shown in the image above. I then used the &lt;tt class="docutils literal"&gt;os.chdir&lt;/tt&gt; method from the &lt;tt class="docutils literal"&gt;os&lt;/tt&gt; module to change to that directory. This is just a convenient way that I like to direct my python scripts to the correct folder but filepaths can be handled in many different ways.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unicodedata&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;main_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\Users\Username\Desktop\End to End Data Analysis Project\header&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*header.csv&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;all_header_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because I am only interested in files that end with the word &amp;quot;header&amp;quot; and have the file extension &amp;quot;.csv&amp;quot;, I use &lt;tt class="docutils literal"&gt;*header.csv&lt;/tt&gt;, the asterisk being a character used in the &lt;a class="reference external" href="https://docs.python.org/3.6/library/re.html"&gt;Regular Expressions library&lt;/a&gt; which means that the filename can start with anything as long as it ends with &amp;quot;header.csv&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pattern&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;all_header_files&lt;/tt&gt; variables are not necessary in this case because the folder &lt;em&gt;only&lt;/em&gt; contains header files and &lt;tt class="docutils literal"&gt;os.chdir&lt;/tt&gt; changed the current directory to the folder with the files but I included these variables and their explanations below because this is a common file manipulation technique that I have found very useful.&lt;/p&gt;
&lt;p&gt;The header files will be contained in the list &lt;tt class="docutils literal"&gt;all_header_files&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;os.path.join&lt;/tt&gt; method simply joins the path provided, &lt;tt class="docutils literal"&gt;main_dir&lt;/tt&gt;, and the pattern &lt;tt class="docutils literal"&gt;header.csv&lt;/tt&gt;. Basically the join method appends &amp;quot;header.csv&amp;quot; to the main folder path. In order to utilize the pattern the way I want to use it, that is, to catch any file that ends with &amp;quot;header.csv&amp;quot;, I used the glob library to expand this pattern to generalize to all files that match the pattern. The list comprehension creates a list of each file's absolute path but &lt;tt class="docutils literal"&gt;os.path.basename&lt;/tt&gt; extracts only the filename and extension from the absolute path. Again, a simple &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop to iterate over each file would suffice in this case, but I included the &lt;tt class="docutils literal"&gt;pattern&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;all_header_files&lt;/tt&gt; as a reference for myself and others when looking to do common file manipulation operations. See the &lt;tt class="docutils literal"&gt;os.path&lt;/tt&gt; &lt;a class="reference external" href="https://docs.python.org/3.6/library/os.path.html"&gt;documentation&lt;/a&gt; for more.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;is_word&lt;/tt&gt;, as you might have guessed, searches for words in a given string. The raw character string &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\w'&lt;/span&gt;&lt;/tt&gt; uses the Regular Expressions module to search for any alphanumeric character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-header-parser-function"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;&lt;strong&gt;The Header Parser function&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The remainder of this blog post will cover the bulk of the script, which is the &lt;tt class="docutils literal"&gt;load_headers&lt;/tt&gt; function. This function loads in each CSV file, one at a time, parses and cleans the header data and saves the modified headers as a new file. This is necessary because the headers, when concatenated with the table data, would be horribly misaligned and would cascade down one to three rows if they were not parsed prior to joining the data.&lt;/p&gt;
&lt;p&gt;The function &lt;tt class="docutils literal"&gt;load_headers&lt;/tt&gt; first accepts a filename (for example &amp;quot;2 header.csv&amp;quot;). Below, the &lt;tt class="docutils literal"&gt;open&lt;/tt&gt; function creates a &lt;a class="reference external" href="https://docs.python.org/3.6/library/functions.html#open"&gt;file object&lt;/a&gt; to be read by the &lt;tt class="docutils literal"&gt;csv&lt;/tt&gt; &lt;a class="reference external" href="https://docs.python.org/3.6/library/csv.html"&gt;module&lt;/a&gt; with the &lt;tt class="docutils literal"&gt;.reader&lt;/tt&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to my first post, I parse each line of the data one at a time, horizonatally, across each row of data and again utilize a dictionary data container to easily have access to any portion of data (e.g. a certain row or a certain word in a given row). Each header row will have a number (index) value associated with it and each header will be stored as a list in the &lt;tt class="docutils literal"&gt;header_dict&lt;/tt&gt; dictionary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;header_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-encoding-problem"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;&lt;strong&gt;The Encoding Problem&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before iterating over each header row of each CSV file to create dictionaries of the header rows, I had to make changes to the text data's encoding.&lt;/p&gt;
&lt;p&gt;The concept of encoding has always been elusive to me until I found this &lt;a class="reference external" href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"&gt;great article&lt;/a&gt;, written by the Stack Overflow CEO, Joel Spolsky.&lt;/p&gt;
&lt;p&gt;Here are my oversimplified definitions of what I have learned about encoding.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Encoding: The process of assigning letters, numbers and symbols into a specially formatted number that a computer can efficiently store in memory and output as a letter, number or symbol. The notated numbers are converted to bits by a computer and stored in memory. This process is complicated and involves low-level coding and computer science knowledge.&lt;/li&gt;
&lt;li&gt;Character Set: A set of characters that are encoded under some character encoding standard like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; or Unicode.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt;: A standardized system of characters (text, numbers, symbols etc.) and their corresponding &amp;quot;integer&amp;quot; called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Code_point"&gt;code points&lt;/a&gt;. These integers are notated in a special way and look like this U+0639 (U+ stands for Unicode and 0639 is a hexadecimal).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt; : a character encoding system that encode all valid Unicode code points using one to four 8-bit bytes.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Windows-1252"&gt;Windows-1252 or CP-1252&lt;/a&gt;: A single byte character encoding of the Latin alphabet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python's default encoding is UTF-8 and the SEC website is encoded with Windows-1252. This mismatch of encodings created frustrating problems I did not understand. I would parse the header data, export to CSV and find strange characters all over the CSV file when I opened it in excel. The root of the problem is succinctly illustrated below in a chart I found on &lt;a class="reference external" href="https://www.i18nqa.com/debug/utf8-debug.html"&gt;this website&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="utf encoding chart" src="/images/utf_encodings.jpg" /&gt;
&lt;p&gt;In the image above you can see there are not only different &amp;quot;inputs&amp;quot; (code points) but different outputs. The solution for this problem involved using the &lt;tt class="docutils literal"&gt;unicodedata&lt;/tt&gt; library and its &lt;tt class="docutils literal"&gt;.normalize&lt;/tt&gt; method. Using the chart's terminology, the 'NFKD' supplied value in the code below simply converts the &lt;em&gt;actual&lt;/em&gt; character result with the &lt;em&gt;expected&lt;/em&gt; character result under the Unicode standard. In this case, a blank space also known as a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Non-breaking_space"&gt;non-breaking space&lt;/a&gt; is the expected and desired value. This solution made it so that instead of a bunch of &amp;quot;ÂÂÂÂÂÂÂÂ&amp;quot;'s appearing in my excel file, they were blank cells like they were supposed to be before the encoding problem. The blank cells are important because they play an integral part in keeping the entire document's format consistent.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;new_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unicodedata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NFKD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_line&lt;/span&gt;
    &lt;span class="n"&gt;header_rows&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;main_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;main_header_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above then creates the variable &lt;tt class="docutils literal"&gt;main_header&lt;/tt&gt;, which is the bottom header row and its associated length. This bottom header row is important because some columns span down 2-3 rows while others do not and the bottom header row is the only consistent row that will be used to align other header rows above it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="account-for-duplicate-values-in-headers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;Account for Duplicate Values in Headers&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next section of the &lt;tt class="docutils literal"&gt;load_headers&lt;/tt&gt; function involves iterating over the dictionary of header values, counting the instances of each word in a given header row and appending a random number from 0-9 to the word if it is not a unique word. This is important for a reason I will explain in the next couple of steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;word_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;word_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word_text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row_ind&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;word_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below, ''filename'' is a variable that will store the new filename for the new CSV file that will contain the parsed header rows. &lt;tt class="docutils literal"&gt;filename&lt;/tt&gt; is created by simply using the existing filename, stripping '.csv' from the end of the file, appending '_parsed' to the end and putting the '.csv' file extension back on the filename string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parsed&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the headers are normalized to Unicode encoding and the duplicates are accounted for, I use the common pythonic way of writing files, utilizing the &lt;tt class="docutils literal"&gt;with open&lt;/tt&gt; technique to write the &lt;tt class="docutils literal"&gt;header_dict&lt;/tt&gt; values (lists of header data) to a CSV file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, I load the &lt;em&gt;new&lt;/em&gt; CSV header file into a Pandas Dataframe for further editing. &lt;strong&gt;The reason I had to account for the duplicate values in the headers involves loading a MultiIndex with Pandas' ``read_csv`` method&lt;/strong&gt;. Because I want to merge all of the header rows into a single header row, I need to be able to access the header rows and their values individually by loading the headers as a MultiIndex. The normal output of a MultiIndex is an array of tuples, which contain the string values for each row in a column. Below is an example of of how the Multindex is organized.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;col1_row1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col1_row2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col1_row3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;col2_row1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col2_row2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col2_row3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;col3_row1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col3_row2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col3_row3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This feature of Pandas is useful because you can access any given value you want by accessing the string values within the tuples. Utilizing the tuples for the MultiIndex was my intention with the code below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
                 &lt;span class="n"&gt;na_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My method of gluing together multiple header rows into one header row was achieved by iterating over each tuple value, putting a space in between each word and then stripping away the white space on the ends of each header by using the &lt;tt class="docutils literal"&gt;.strip&lt;/tt&gt; method. Lastly, the &lt;tt class="docutils literal"&gt;load_headers&lt;/tt&gt; function returns the dataframe with the cumulative changes made thus far.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, &lt;em&gt;when gluing the header rows together I noticed that my results for duplicate values came out strange&lt;/em&gt;. But only for duplicate values in a given row. My IPython session below illustrates why.&lt;/p&gt;
&lt;img alt="tuples vs strings" src="/images/headers_tuples_strings.jpg" /&gt;
&lt;p&gt;In the image above, you can see that the majority of header columns are tuples, as expected, but columns 8-10, 12 and 13 are &lt;em&gt;string&lt;/em&gt; values. For reasons I do not know, Pandas will load duplicate values in a MultiIndex not as tuples but as string values. So, when I iterate over each header column like they are tuples as I did with the &lt;tt class="docutils literal"&gt;' &lt;span class="pre"&gt;'.join(col)...&lt;/span&gt;&lt;/tt&gt; list comprehension above, I ended up iterating over each character in those string values causing columns with duplicate values to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; L e a s e &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39; E x p i r a t i o n &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above, there is a space in between each letter caused by the &lt;tt class="docutils literal"&gt;' '.join&lt;/tt&gt; list comprehension. The iteration method word fine on the column values that were tuples but created the undesired result when the column was actually a string value. Luckily, I found a way to differentiate the duplicate values by appending a random number as show earlier in this post.&lt;/p&gt;
&lt;p&gt;Finally, a simple for loop iterates over the files in the directory, utilizes the &lt;tt class="docutils literal"&gt;load_headers&lt;/tt&gt; function, appends each header file's headers to a single list &lt;tt class="docutils literal"&gt;all_header_values&lt;/tt&gt;, concatenates the resulting list using the &lt;tt class="docutils literal"&gt;pd.concat&lt;/tt&gt; method and saves the parsed headers into a single CSV file which I called 'frame.csv'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;all_header_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; header.csv&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;all_header_values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_header_values&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frame.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason I iterated over the range of numbers I did was because there were 19 files in the directory and I wanted to iterate over &lt;em&gt;every other&lt;/em&gt; file because duplicate sets of headers were &amp;quot;skipped&amp;quot; by saving them as a blank CSV file as show in the code in my first post.&lt;/p&gt;
&lt;p&gt;Now that all the data is gathered and the headers have been parsed and combined into a single, neat row, the only thing left to produce a single table of data is to concatenate the table files and their respective headers, which I will do in my next post.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="tutorial"></category></entry><entry><title>End-to-End Data Analysis Project: Part 1. Getting Data</title><link href="https://sonnycruz.github.io%5C2018/12/23/Getting-Data/" rel="alternate"></link><published>2018-12-23T07:33:00-06:00</published><updated>2018-12-23T07:33:00-06:00</updated><author><name>Sonny Torres</name></author><id>tag:sonnycruz.github.io\2018,2018-12-23:/12/23/Getting-Data/</id><summary type="html">&lt;p class="first last"&gt;Parsing a messy HTML file, downloaded from SEC.gov, and formatting it into a tabular dataset.&lt;/p&gt;
</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-goal" id="id2"&gt;The Goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-to-expect-in-this-post" id="id3"&gt;What to Expect in this Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-source-code" id="id4"&gt;&lt;strong&gt;The Source Code&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-tools-used" id="id5"&gt;The Tools Used&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#understanding-the-data" id="id6"&gt;&lt;strong&gt;Understanding the Data&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-data-source" id="id7"&gt;The Data Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-is-cmbs" id="id8"&gt;What is CMBS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#table-arrangement" id="id9"&gt;Table Arrangement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-html-structure" id="id10"&gt;The HTML Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#import-libraries-and-make-soup" id="id11"&gt;&lt;strong&gt;Import Libraries and Make Soup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#grab-the-tables" id="id12"&gt;&lt;strong&gt;Grab the Tables&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-headers" id="id13"&gt;&lt;strong&gt;The Headers&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#good-headers" id="id14"&gt;Good Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bad-headers" id="id15"&gt;Bad Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#skip-headers-with-colspans-greater-than-2" id="id16"&gt;Skip Headers with Colspans Greater than 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-bad-side-of-good-headers" id="id17"&gt;The Bad Side of Good Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#infinite-nest" id="id18"&gt;Infinite Nest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#file-writer-function" id="id19"&gt;&lt;strong&gt;File Writer Function&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#file-organization-function" id="id20"&gt;&lt;strong&gt;File Organization Function&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-bulk-of-the-script" id="id21"&gt;&lt;strong&gt;The Bulk of the Script&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-data-container-objects" id="id22"&gt;&lt;strong&gt;The Data Container Objects&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-1-iterate-over-each-table-and-each-row" id="id23"&gt;&lt;strong&gt;Part 1: Iterate over each Table and each Row&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-2-create-list-of-colspan-values" id="id24"&gt;&lt;strong&gt;Part 2: Create List of Colspan Values&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-3-populate-dictionary-with-header-data" id="id25"&gt;&lt;strong&gt;Part 3: Populate Dictionary with Header Data&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-4-populate-dictionary-with-table-data" id="id26"&gt;&lt;strong&gt;Part 4: Populate Dictionary with Table Data&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-5-write-data-to-file" id="id27"&gt;&lt;strong&gt;Part 5: Write Data to File&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-6-fix-colspan-misalignment-issues" id="id28"&gt;&lt;strong&gt;Part 6: Fix Colspan Misalignment Issues&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-objects-to-correct-alignment" id="id29"&gt;Create Objects to Correct Alignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-for-loop-to-correct-alignment" id="id30"&gt;Use For Loop to Correct Alignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#give-it-some-space-s" id="id31"&gt;Give it Some Space(s)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#part-7-write-the-remaining-data-to-csv" id="id32"&gt;&lt;strong&gt;Part 7: Write the Remaining Data to CSV&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After working with Python to manipulate and analyze commercial loan data at my job, I wanted to start a data analysis blog where I could showcase my programming projects. However, the loan data I used at my job was subject to &lt;strong&gt;copyright protection&lt;/strong&gt;. Luckily, the Securities and Exchange Commission website publishes similar data.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id2"&gt;The Goal&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My goals for this project were the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Get data&lt;/strong&gt; : Acquire commercial property loan data that I could use and publish on my blog in order to showcase some of my Python projects in future posts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt; : I wanted to create an automation script that could retrieve the data from scratch (no copying and pasting and/or tailoring the script to this &lt;em&gt;exact&lt;/em&gt; URL) and that could generalize, with minimal modifications, and work on similar SEC postings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice&lt;/strong&gt;: Refine my programming and data cleaning skills.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-expect-in-this-post"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;What to Expect in this Post&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I will be detailing the process of parsing a messy HTML file with multiple tables and writing the data to CSV files. These files will be combined and cleaned in future posts. This particular post covers the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The data source and what the data covers.&lt;/li&gt;
&lt;li&gt;A walk through of the layout of the web page and the HTML structure.&lt;/li&gt;
&lt;li&gt;Helper functions that are utilized in the main script.&lt;/li&gt;
&lt;li&gt;A break down of the main HTML parsing script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;This is not a Python beginner-friendly post&lt;/strong&gt;, however, I created visualizations where I thought they would help, included several website links throughout to reference some fundamental programming concepts and aimed to explain everything in detail while trying to keep things as simple as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-source-code"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;&lt;strong&gt;The Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Link to repository here: &lt;a class="reference external" href="https://github.com/sonnycruz/End-to-End-Data-Analysis"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-tools-used"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;The Tools Used&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The code in this post is primarily constructed with the main Python library (version 3.6), &lt;a class="reference external" href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;BeautifulSoup&lt;/a&gt; and a little bit of &lt;a class="reference external" href="https://docs.python.org/3.7/library/re.html"&gt;Regular Expressions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="understanding-the-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;strong&gt;Understanding the Data&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-data-source"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;The Data Source&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To retrieve the HTML file that I used, you can download the HTML file hosted on my github page or you can visit the SEC url and press Ctrl + S to save the file as an HTML document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Right-click on the link &amp;amp; save as an html file&lt;/strong&gt;: &lt;a class="reference external" href="https://sonnycruz.github.io/files/JPC11C05.html"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL&lt;/strong&gt;: &lt;a class="reference external" href="https://www.sec.gov/Archives/edgar/data/1013611/000152153611000217/q1100154_fwpa1-jpm.htm"&gt;https://www.sec.gov/Archives/edgar/data/1013611/000152153611000217/q1100154_fwpa1-jpm.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To view the webpage HTML, open the file or website in your browser and right click anywhere on the webpage and click &amp;quot;Inspect&amp;quot;. Ctrl+Shift+I is the windows shortcut to do this.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-cmbs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;What is CMBS?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Commercial Mortgage-Backed Securities (&lt;a class="reference external" href="https://www.investopedia.com/terms/c/cmbs.asp"&gt;CMBS&lt;/a&gt;) are &lt;a class="reference external" href="https://www.pimco.com/en-us/resources/education/everything-you-need-to-know-about-bonds"&gt;Bonds&lt;/a&gt; backed by a group of commercial mortgages. The bonds are then sold to investors on the open market and thus subject to SEC regulations and the data is public. The subject website is an example of a document called the Annex A of a prospectus. A prospectus is meant to advertise and inform potential investors of the investment opportunity and the Annex A section tabulates the loans and commercial properties that serve as collateral for the loans. The SEC data being used in this post covers one securitized pool, or group, of CMBS loans. There are 44 loans and 216 rows of data.&lt;/p&gt;
&lt;p&gt;The individual CMBS data points included in the dataset fall into four main categories:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Mortgage data&lt;/strong&gt; (Loan Balance, Interest Rate, Maturity Date, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commercial Property Data&lt;/strong&gt; (Location, Property Type, Square Feet, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Securitization Data&lt;/strong&gt; (characteristics that describe the Securitized structure such as a given loan's loan balance as a proportion of the entire pool/group of loans).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Data&lt;/strong&gt; (historical financial performance of the commercial properties).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="table-arrangement"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Table Arrangement&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;The dataset is split into many different tables that are vertically lined up on one page&lt;/strong&gt;. Because I wanted tabular data, I had to first understand how the various tables were organized in order to put them together. &lt;strong&gt;The charts below illustrate how the first four tables are arranged and how they must be transformed in order to fit together as a single dataset like a CSV or excel file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Below, you can see four tables with various headers, columns and rows. For simplification, the visuals below include only 10 Commercial Properties. Each column, which includes a data point for every row, is broken up into &lt;strong&gt;two separate tables&lt;/strong&gt;. So, Properties 1-5 are in Table 1 and Table 2 lists the other 5 properties - Properties 6-10. Similarly, Table 4 is a continuation of Table 3.&lt;/p&gt;
&lt;img alt="table of four" src="/images/a_four_tables.jpg" style="width: 346.2px; height: 690.9px;" /&gt;
&lt;img alt="new legend" src="/images/new_legend.jpg" style="width: 375px; height: 140px;" /&gt;
&lt;p&gt;&lt;strong&gt;Tables 1 &amp;amp; 2 need to be glued together and 3 &amp;amp; 4 need to be glued together, both along the horizonal axis&lt;/strong&gt;. Notice how the excess headers, (the grey-shaded headers in the above figure) have been eliminated in the figure below.&lt;/p&gt;
&lt;img alt="table of two" src="/images/table_of_two.jpg" style="width: 375.9px; height: 524.4px;" /&gt;
&lt;p&gt;Next, the pairs of tables then have to be joined together on their respective vertical axes. Because &amp;quot;Prop1, Prop2..etc.&amp;quot; represents not only commercial properties in the pool of mortgages, but are also the indices for each table, we will have to go back and delete the duplicate indices that will result from merging the tables in this way.&lt;/p&gt;
&lt;img alt="table horizontal" src="/images/table_horizontal.jpg" style="width: 668px; height: 245px;" /&gt;
&lt;p&gt;&lt;strong&gt;When iteratively joining every 4 tables in this way, the result will be a single tabular dataset&lt;/strong&gt;, albeit with plenty of clean up work left to do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Although the data is not merged into a single data set in this post, assessing the layout significantly informed the way I approached the parsing and the writing of the data to files as you will see in this post&lt;/strong&gt;. The tricky table layout actually pales in comparison, for me, to the complexity of parsing the header rows and creating rules to account for blank spaces in the table, which I will explain later in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-html-structure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;The HTML Structure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before writing any code, I first had to carefully examine the HTML structure (Ctrl+Shift+I on windows to view the HTML followed by Ctrl+F to find keywords). &lt;strong&gt;The key to understanding the HTML, for me, was understanding the `HTML tag &amp;lt;https://www.w3schools.com/tags/tag_html.asp&amp;gt;`_ structure, as well as what characteristics makes certain kinds of data unique, specifically what `HTML tag attributes &amp;lt;https://www.w3schools.com/html/html_attributes.asp&amp;gt;`_ make a given row of data identifiable as being a header row, a data row or a row to skip&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some HTML Table Basics&lt;/strong&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;table&lt;/tt&gt; tags define a table of data.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tr&lt;/tt&gt; tags define the rows in a table.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags define a cell in table.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More on HTML table structures &lt;a class="reference external" href="https://www.w3schools.com/html/html_tables.asp"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="import-libraries-and-make-soup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;&lt;strong&gt;Import Libraries and Make Soup&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are the libraries I used for this task. The &lt;tt class="docutils literal"&gt;working_dir&lt;/tt&gt; variable is the path that contains the html file and the name of the file is assigned to &lt;tt class="docutils literal"&gt;filename&lt;/tt&gt;. I often use the &lt;tt class="docutils literal"&gt;os.chdir()&lt;/tt&gt; method, out of preference, to direct my scripts to the appropriate directory but other methods work just as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="n"&gt;working_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:\Users\Username\Desktop\End to End Data Analysis Project&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;working_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;JPC11C05.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I used Python's &lt;tt class="docutils literal"&gt;with open&lt;/tt&gt; syntax to create a file object which gave me the detail needed for parsing the HTML file at a granular, line by line, element by element level.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="grab-the-tables"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;&lt;strong&gt;Grab the Tables&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each table of data is encased in &lt;tt class="docutils literal"&gt;table&lt;/tt&gt; tags in the HTML document. However, there were tables that I did not want, specifically the &lt;tt class="docutils literal"&gt;table&lt;/tt&gt; tags that consist of only footnotes (at bottom of HTML document). I noticed that these tables all had a &lt;tt class="docutils literal"&gt;border&lt;/tt&gt; attribute within the main table tag (see below).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good Table&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="good table" src="/images/good_table.JPG" /&gt;
&lt;p&gt;&lt;strong&gt;Bad Table&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="bad table" src="/images/bad_table.JPG" /&gt;
&lt;p&gt;So, I used a list comprehension to grab all the tables by targeting the &lt;tt class="docutils literal"&gt;table&lt;/tt&gt; HTML tag and excluded all &lt;tt class="docutils literal"&gt;table&lt;/tt&gt; tags with a &lt;tt class="docutils literal"&gt;'border'&lt;/tt&gt; tag attribute. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;soup.findAll('table')&lt;/span&gt;&lt;/tt&gt; returns a &lt;tt class="docutils literal"&gt;bs4.element.ResultSet&lt;/tt&gt; which is a list of &lt;tt class="docutils literal"&gt;bs4.element.Tag&lt;/tt&gt; objects - the &lt;tt class="docutils literal"&gt;table&lt;/tt&gt; tags. &lt;tt class="docutils literal"&gt;table_count&lt;/tt&gt; stores the number of tables to iterate over.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;border&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;table_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-headers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;&lt;strong&gt;The Headers&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Because the table headers came with their own unique challenges, I wanted to keep track of the headers and table rows separately. I first needed to see what distinguished the headers in the HTML&lt;/strong&gt;. Embedded in the &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag, there is a &lt;tt class="docutils literal"&gt;font&lt;/tt&gt; tag with a &lt;tt class="docutils literal"&gt;style&lt;/tt&gt; attribute. I found that &lt;em&gt;all&lt;/em&gt; header cells contained the word &lt;tt class="docutils literal"&gt;bold&lt;/tt&gt; in the attribute value for the &lt;tt class="docutils literal"&gt;style&lt;/tt&gt; attribute (see below) and the table rows &lt;strong&gt;never&lt;/strong&gt; contained the &lt;tt class="docutils literal"&gt;bold&lt;/tt&gt; tag attribute.&lt;/p&gt;
&lt;img alt="header td" src="/images/header_td.JPG" /&gt;
&lt;div class="section" id="good-headers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Good Headers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The function I made to identify headers has two parameters, &lt;tt class="docutils literal"&gt;tag&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;keyword&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;tag&lt;/tt&gt; parameter accepts an HTML tag to search for the keyword &amp;quot;bold&amp;quot; within the font's style attribute.&lt;/li&gt;
&lt;li&gt;BeautifulSoup's &lt;tt class="docutils literal"&gt;.find()&lt;/tt&gt; method accepts the tag to find, &amp;quot;font&amp;quot;, and the tag attribute/value pair, &amp;quot;style&amp;quot; and &amp;quot;bold&amp;quot;. &lt;tt class="docutils literal"&gt;.find()&lt;/tt&gt; returns only the first instance of the match it finds, which is sufficient for determining a header row.&lt;/li&gt;
&lt;li&gt;When the function below does &lt;em&gt;not&lt;/em&gt; find the &amp;quot;bold&amp;quot; keyword, it will return a &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; object, which is important to know for later.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# returns bs4.element.Tag or None&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;font&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bad-headers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Bad Headers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;However, I wanted to &lt;em&gt;exclude&lt;/em&gt; some of the header rows. Some of the tables have a hierarchal index structure where one large header row describes a group of columns (See &amp;quot;Hotel Operating Statistics&amp;quot; below).&lt;/p&gt;
&lt;img alt="hotel op stats header" src="/images/trythisheadercropped.png" /&gt;
&lt;p&gt;The above Bad Header is differentiated in the HTML from the Good Header by having a large &amp;quot;colspan&amp;quot; attribute value. &lt;strong&gt;The &amp;quot;colspan&amp;quot; attribute tells us how many columns a given data point spans across&lt;/strong&gt;. The HTML below shows that the &amp;quot;Hotel Operating Statistics&amp;quot; header has a colspan value of 15.&lt;/p&gt;
&lt;img alt="colspan 15" src="/images/colspan15.JPG" /&gt;
&lt;p&gt;To be clear, in this HTML file, &lt;strong&gt;all colspan attributes are associated with headers but not all headers are associated with a colspan attribute&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I then searched the HTML document manually in my browser, using Ctrl+f, for &amp;quot;colspan&amp;quot;. &lt;strong&gt;There are only 20 instances of &amp;quot;colspan&amp;quot; in the entire HTML document and I saw that the highest colspan value for a good header was 2&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="skip-headers-with-colspans-greater-than-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Skip Headers with Colspans Greater than 2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The function, &lt;tt class="docutils literal"&gt;unwanted_header()&lt;/tt&gt;, below, will accept the &lt;tt class="docutils literal"&gt;tr&lt;/tt&gt; tag as the argument for the &lt;tt class="docutils literal"&gt;tag&lt;/tt&gt; parameter and the &lt;tt class="docutils literal"&gt;colspan_limit&lt;/tt&gt; default value is set to 2, as a good header can have a colspan value of 2.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;unwanted_header()&lt;/tt&gt; searches the &lt;tt class="docutils literal"&gt;tr&lt;/tt&gt; tag for any &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag that has a &lt;tt class="docutils literal"&gt;colspan&lt;/tt&gt; tag attribute with a numerical string value.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;re.compile()&lt;/tt&gt; method is a Regular Expressions method that creates a Regular Expression object with a pattern that can be searched for.&lt;/li&gt;
&lt;li&gt;The 'r' tells Python not to interpret any backslash characters (for example &lt;tt class="docutils literal"&gt;\n&lt;/tt&gt; is interpreted by Python as a newline) and to let BeautifulSoup interpret the backslashes with its own syntax rules. In this case, &lt;tt class="docutils literal"&gt;\d+&lt;/tt&gt; will be interpreted by BeautifulSoup to mean &amp;quot;any numerical string occuring at least one time&amp;quot;.&lt;/li&gt;
&lt;li&gt;If the &lt;tt class="docutils literal"&gt;colspan&lt;/tt&gt; attribute is present in one of the row's &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags then the &lt;tt class="docutils literal"&gt;colspan_obj&lt;/tt&gt; will exist as a Tag object and the &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statement is &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;. If the specific tag is not found, the object will be a &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; value and the &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statement is &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;colspan_val&lt;/tt&gt; is a variable assigned to the colspan value, the string value for the &lt;tt class="docutils literal"&gt;colspan&lt;/tt&gt; tag attribute and it is converted to an integer by using the &lt;tt class="docutils literal"&gt;int()&lt;/tt&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;colspan_obj&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;bs4.element.Tag&lt;/tt&gt; object, which means the tag's attributes can be accessed like a dictionary like this: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;colspan_obj['colspan']&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Finally, if the integer is larger than 2, the function will return True and if there is no &lt;tt class="docutils literal"&gt;colspan_obj&lt;/tt&gt; or if the integer is equal to or less than 2, the function will return &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unwanted_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colspan_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;colspan_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;td&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colspan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\d+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;colspan_obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;colspan_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colspan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;colspan_val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;colspan_limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I created a simple function to test for the previous two function's criteria at once.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_good_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;unwanted_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bad-side-of-good-headers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;The Bad Side of Good Headers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before, I mentioned that &lt;strong&gt;there are some good headers with a colspan value equal to 2&lt;/strong&gt;. These headers need to be identified in order to correct a problem they present.&lt;/p&gt;
&lt;p&gt;In the image below, the column &amp;quot;Other Reserve Cap&amp;quot; reflects how the website's tags are organized when a header value spans across 2 columns. A header value with a colspan attribute value of 2, &amp;quot;Other Reserve Cap&amp;quot;, is enclosed in 1 &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag, while the rows of data below the header have 2 &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags (see picture for yellow and blue &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags). This 2-to-1 arrangement is not visible on the website and aligns appropriately in the HTML output, however, &lt;strong&gt;because my script iterates over every ``td`` tag and writes each one to a cell in my CSV file, I ran into a cell alignment problem illustrated in the figure below labeled &amp;quot;CSV Result&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="cell align new" src="/images/cell_align_new.jpg" style="width: 601.2px; height: 229.5px;" /&gt;
&lt;p&gt;To identify the good headers with a colspan value of 2, I created a boolean function that returns &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; when all &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags span the same number of columns, 1 each, and returns False when they do not.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Below is the boolean function &lt;tt class="docutils literal"&gt;cells_same_colspan()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;colspan_dict&lt;/tt&gt; is a dictionary object where the keys are the row numbers of a table and the values are lists with the colspan values.&lt;/li&gt;
&lt;li&gt;By using a list comprehension that calls the &lt;tt class="docutils literal"&gt;max()&lt;/tt&gt; function on every list of colspan values, I can create a list of maximum colspan values per row. &lt;tt class="docutils literal"&gt;max()&lt;/tt&gt; is called once again on the list of max values per row to find the highest colspan value for a entire table of data (headers and table rows).&lt;/li&gt;
&lt;li&gt;The function returns &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; when the largest colspan value does not equal 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cells_same_colspan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# reduce colspan dict values&lt;/span&gt;
    &lt;span class="n"&gt;max_colspan_per_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colspan_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_colspan_per_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below is an example of what the &lt;tt class="docutils literal"&gt;colspan_dict&lt;/tt&gt; object, which is passed to the function above, would look like if a table had two rows and had a single colspan value equal to 2 in the second row.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# COLSPAN_DICT object&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="c1"&gt;# where the dict keys are table rows (including headers)&lt;/span&gt;
&lt;span class="c1"&gt;# and the dict values are lists containing&lt;/span&gt;
&lt;span class="c1"&gt;# each data point&amp;#39;s colspan value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function &lt;tt class="docutils literal"&gt;cells_same_colspan()&lt;/tt&gt; would return &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; on the &lt;tt class="docutils literal"&gt;COLSPAN_DICT&lt;/tt&gt; above and the row with the colspan value equal to 2 would need to be modified to align the table columns properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="infinite-nest"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Infinite Nest&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like the book &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Infinite_Jest"&gt;Infinite Jest&lt;/a&gt;, where the author's writing style can yield a page-long sentence with several tangential thoughts nested within the main thought, for the code to work the way I wanted, I created a number of nested objects. The data structures I used to track each piece of data (rows, data points, colspan values etc.), as well as the control structure of the main loop display a very layered, nested characteristic.&lt;/p&gt;
&lt;p&gt;For example, &lt;tt class="docutils literal"&gt;nested_colspan_dict&lt;/tt&gt; is a function that returns the dictionary object below. Tuples are nested within lists nested within a dictionary. This structure is used to store all the information needed to make cell alignment corrections before they are written to a CSV file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# NESTED_COLSPAN_DICT object&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="c1"&gt;# where the dict keys are table rows&lt;/span&gt;
&lt;span class="c1"&gt;# and the dict values are lists containing tuples&lt;/span&gt;
&lt;span class="c1"&gt;# each tuple contains..&lt;/span&gt;
&lt;span class="c1"&gt;# (index value of a given data point, the colspan value for given point)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The function &lt;tt class="docutils literal"&gt;nested_colspan_dict&lt;/tt&gt; creates the data structure by iterating over the key, value pairs in the &lt;tt class="docutils literal"&gt;colspan_dict&lt;/tt&gt; object, accessed via the &lt;tt class="docutils literal"&gt;.items()&lt;/tt&gt; method on the dictionary object. The dictionary comprehension creates a new dictionary where the key will remain the row number and the value will be a list of tuples, similar to the example above.&lt;/li&gt;
&lt;li&gt;Using Python's built-in &lt;tt class="docutils literal"&gt;enumerate()&lt;/tt&gt; function on the colspan values in each row will produce tuples with the index of a given colspan value and the colspan value itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nested_colspan_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nested_colspan_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;colspan_tuple&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;colspan_tuple&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colspan_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nested_colspan_obj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, since I needed to extract data from the nested dictionary multiple times, it made sense to create a function. This function iterates over the nested dictionary object and checks to see if a given colspan value does not equal 1 and returns the object's row number, index of colspan value and the colspan value.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The function first iterates over the key, value pairs of the &lt;tt class="docutils literal"&gt;nested_colspan&lt;/tt&gt; object which was created with the previous function &lt;tt class="docutils literal"&gt;nested_colspan_dict&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Because the &lt;tt class="docutils literal"&gt;nested_colspan&lt;/tt&gt; dict values are lists containing tuples, you have to iterate over the individual tuples to access the information inside them (such as the colspan values). For any tuple, if the colspan value does not equal one, the function will yield a dictionary object which contains the row number as the key and a tuple as the dictionary value. The tuple will then be parsed for the colspan value and the index value it occurs in the row it resides.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;colspans_to_fix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nested_colspan&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nested_colspan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tupl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#tuples are (colspan_index, colspan_value)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tupl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# key = row number&lt;/span&gt;
                &lt;span class="c1"&gt;# tuple = (index_of_cell, colspan_value_for_cell)&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tupl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="file-writer-function"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;&lt;strong&gt;File Writer Function&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are commonly used lines of code in Python when doing I/O operations (see Python docs for working with &lt;a class="reference external" href="https://docs.python.org/3.7/library/csv.html"&gt;CSV files&lt;/a&gt; ). I put these basic instructions into a function to curtail redundancy.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One detail to note is that in the very last line of the function, the &lt;tt class="docutils literal"&gt;.writerows&lt;/tt&gt; method accepts an iterable which will be the table rows in the form of Python lists.&lt;/li&gt;
&lt;li&gt;If no row (list) is present, the row will not be written to the CSV file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A function to write the rows to a file.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# if row avoids blank rows&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="file-organization-function"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;&lt;strong&gt;File Organization Function&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the main &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop finishes (shown after this function) there will be multiple CSV files generated in the program's directory. To organize the header and table files, the following function creates folders for each and moves the files into their respective folders.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;headers_tables()&lt;/tt&gt; is a simple function that will create a folder &lt;tt class="docutils literal"&gt;name&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;file_path&lt;/tt&gt; is the path with the CSV files and its default value is set to &lt;tt class="docutils literal"&gt;os.getcwd()&lt;/tt&gt; which is the program's current directory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;if not os.path.exists(name)&lt;/tt&gt; uses the &lt;tt class="docutils literal"&gt;os&lt;/tt&gt; module and creates (using &lt;tt class="docutils literal"&gt;os.mkdir()&lt;/tt&gt;) a directory if the given name does not already exist as a folder in the current directory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pattern = '*' + name + '.csv'&lt;/tt&gt; creates a string pattern where &lt;tt class="docutils literal"&gt;'*' + name + '.csv'&lt;/tt&gt; is a string that will be used to match all CSV files in the directory.&lt;/li&gt;
&lt;li&gt;A list comprehension with the &lt;tt class="docutils literal"&gt;glob.glob()&lt;/tt&gt; method in conjunction with &lt;tt class="docutils literal"&gt;os.path.join()&lt;/tt&gt; glues &lt;tt class="docutils literal"&gt;file_path&lt;/tt&gt; with the string pattern provided in &lt;tt class="docutils literal"&gt;pattern&lt;/tt&gt; and creates a list of all the pattern-matching files in the directory.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop iterates over every &lt;tt class="docutils literal"&gt;file&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;file_list&lt;/tt&gt; and moves them to the newly created directory &lt;tt class="docutils literal"&gt;name&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;headers_tables&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;file_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;file_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bulk-of-the-script"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;&lt;strong&gt;The Bulk of the Script&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main portion of the script is a long &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop with multiple conditional statements to control the flow of the various instructions.&lt;/p&gt;
&lt;p&gt;Below is the main script in one block of code, which I will expand on in pieces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;header_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;
    &lt;span class="n"&gt;colspan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;line_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;colspan&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;td_tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colspan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;colspan&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;td_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;td_tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_good_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                                                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                                                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;line_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;is_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                                                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                                                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;line_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cells_same_colspan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;nested_cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nested_colspan_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bad_colspans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colspans_to_fix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nested_cs&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;headers_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;colspan_dict&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bad_colspans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colspan_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;row_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
                &lt;span class="n"&gt;colspan_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colspan_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
                &lt;span class="n"&gt;colspan_minus_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colspan_val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;index_for_insert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colspan_ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;headers_only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_minus_one&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index_for_insert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_minus_one&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index_for_insert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-data-container-objects"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;&lt;strong&gt;The Data Container Objects&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before expanding on the &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop, I want to cover the main objects that are created for each iteration.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;table&lt;/tt&gt; : Because I previously created the &lt;tt class="docutils literal"&gt;tables&lt;/tt&gt; object, I can access each table by calling a given table's index value. In this case &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; will be an integer, generated by the &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt; function being called with &lt;tt class="docutils literal"&gt;table_count&lt;/tt&gt;, that will be used to index each table in the list object &lt;tt class="docutils literal"&gt;tables&lt;/tt&gt; .&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;headers_rows&lt;/tt&gt; : This will be the main data structure that stores the data that will be written directly to a CSV file. The nested dictionary will have two main keys, one for header data ( &lt;tt class="docutils literal"&gt;headers&lt;/tt&gt; ) and another for table data ( &lt;tt class="docutils literal"&gt;'tdata'&lt;/tt&gt; ). Because this object's structure is layered, I created a small visual of the data structure below.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# headers_rows&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;#39;headers&amp;#39; is the key for the header dictionary and &amp;#39;tdata&amp;#39; is the key for the table dictionary.&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;headers&amp;#39; contains all headers for one table and &amp;#39;tdata&amp;#39; contains all table data for one table.&lt;/span&gt;
&lt;span class="c1"&gt;# Each integer, above, represent a row number.&lt;/span&gt;
&lt;span class="c1"&gt;# Each list represents a row.&lt;/span&gt;
&lt;span class="c1"&gt;# Each letter represents a data point in a row.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;colspan&lt;/tt&gt; : This object will be a dictionary where the dictionary keys are the row count and the values will be lists containing the colspan values.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;line_count&lt;/tt&gt;: a simple row counter.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="part-1-iterate-over-each-table-and-each-row"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;&lt;strong&gt;Part 1: Iterate over each Table and each Row&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop first iterates over a sequence of numbers generated by the &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;table_count&lt;/tt&gt; object is just an integer that tells us how many tables to iterate over. Because &lt;tt class="docutils literal"&gt;table_count&lt;/tt&gt; is equal to the number 20, &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt; will produce the sequence 0-19, which will allow us to access each table. The script will start on &lt;tt class="docutils literal"&gt;tables[0]&lt;/tt&gt;, followed by &lt;tt class="docutils literal"&gt;ables[1]&lt;/tt&gt; and so-on.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;header_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;
    &lt;span class="n"&gt;colspan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;line_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Next, the loop begins iterating over each table row by using BeautifulSoup's &lt;tt class="docutils literal"&gt;.findAll()&lt;/tt&gt; method, which will return a list of all &lt;tt class="docutils literal"&gt;tr&lt;/tt&gt; tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-create-list-of-colspan-values"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;&lt;strong&gt;Part 2: Create List of Colspan Values&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;colspan&lt;/tt&gt; dict will be created by using the &lt;tt class="docutils literal"&gt;line_count&lt;/tt&gt; integer value, starting at 0, as the dictionary keys and a list of colspan values as the dictionary values. A plain-spoken description of the list comprehension could be &amp;quot;for each &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag in all the found &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags, if the 'colspan' string is one of the &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag attributes, return the colspan value as an integer, if not, return the number 1.&amp;quot; I made it so that all &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags have a default colspan value of 1 (meaning they span only one column).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;colspan&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;td_tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colspan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;colspan&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;td_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;td_tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-3-populate-dictionary-with-header-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;&lt;strong&gt;Part 3: Populate Dictionary with Header Data&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After recording the colspan values, the row or &lt;tt class="docutils literal"&gt;tr&lt;/tt&gt; tag will be passed to the boolean &lt;tt class="docutils literal"&gt;is_good_header()&lt;/tt&gt; function.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;and i % 2 == 0&lt;/tt&gt; is a way to avoid the excess header data. If &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; is divisible by 2, meaning the integer (which represents the table number) is &lt;em&gt;even&lt;/em&gt;, then the table's headers are the program's first time to encounter a given set of headers. The odd numbered tables will contain duplicate header data and will be excluded.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;header_rows&lt;/tt&gt; contains two &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; keys ('headers' and 'tdata'), both of which have an empty dictionary as initial values. The empty dictionaries are then populated with key value pairs. The keys for each empty dictionary will be the row number in the table, or &lt;tt class="docutils literal"&gt;line_count&lt;/tt&gt;, and the values associated with each key will be a list that contains the row's data. The individual data points in a given row will be stored as string values in each list.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;for data in &lt;span class="pre"&gt;row.findAll('td')&lt;/span&gt;&lt;/tt&gt; is the start of a list comprehension that populates the values of a given header row. The list comprehension is stating, &amp;quot;for each data point, encased in a row's &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags, if the data point is an instance of a Tag object, return the text value in the &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag, if not return an empty string.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;data.font.text&lt;/tt&gt; uses BeautifulSoup's syntax to access a Tag's attribute like a dictionary, such as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;data['font']&lt;/span&gt;&lt;/tt&gt; or using the syntax &lt;tt class="docutils literal"&gt;data.font&lt;/tt&gt;. The object's class attribute &lt;tt class="docutils literal"&gt;.text&lt;/tt&gt;, not to be confused with a tag's HTML attribute, extracts the text or string value within the tag.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;line_count&lt;/tt&gt; is incremented by 1 so that each row has a unique identifier and is accessible as a dictionary key via indexing.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_good_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                                          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                                          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;line_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-4-populate-dictionary-with-table-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;&lt;strong&gt;Part 4: Populate Dictionary with Table Data&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Next, because the function &lt;tt class="docutils literal"&gt;is_header()&lt;/tt&gt; returns a &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; object when a header is &lt;em&gt;not&lt;/em&gt; found, I used the &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; object as a simple way to identify rows that are &lt;strong&gt;not&lt;/strong&gt; headers. Similar to the block of code above, the &lt;tt class="docutils literal"&gt;headers_rows&lt;/tt&gt; nested dictionary is populated with row data but within the 'tdata' dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;is_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;line_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                                        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;line_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-5-write-data-to-file"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27"&gt;&lt;strong&gt;Part 5: Write Data to File&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; statement is also included for instances when a row, (table row or header row) does not meet the previous two criteria - a row is an odd numbered header row for instance.&lt;/li&gt;
&lt;li&gt;Finally, the simple &lt;tt class="docutils literal"&gt;write_rows()&lt;/tt&gt; function is implemented for the table's &amp;quot;good&amp;quot; (no cell alignment issues) rows and header rows. The tables are written to a CSV file and split up by their naming convention which notes the table number and whether the data is header or table data.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cells_same_colspan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-6-fix-colspan-misalignment-issues"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;&lt;strong&gt;Part 6: Fix Colspan Misalignment Issues&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This next section was pretty tricky for me.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When &lt;tt class="docutils literal"&gt;cells_same_colspan()&lt;/tt&gt; returns False, meaning their is a colspan value larger than 1, then a cell alignment issue is present and must be corrected.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="create-objects-to-correct-alignment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;Create Objects to Correct Alignment&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;nested_cs&lt;/tt&gt; object below uses the &lt;tt class="docutils literal"&gt;nested_colspan_dict()&lt;/tt&gt; function which associates the index values for each colspan value via the built-in &lt;tt class="docutils literal"&gt;enumerate()&lt;/tt&gt; Python function.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;bad_colspans&lt;/tt&gt; object is created with a list comprehension that creates a list of dictionaries that contain all the information needed to modify a given row's data points. Because &lt;tt class="docutils literal"&gt;colspans_to_fix&lt;/tt&gt; is a generator function, the function will only yield the values when called on or calling the &lt;tt class="docutils literal"&gt;next()&lt;/tt&gt; function.&lt;/li&gt;
&lt;li&gt;As an example of a generated value by the &lt;tt class="docutils literal"&gt;colspans_to_fix()&lt;/tt&gt; function, if row 1, cell 9 had a colspan value of 2, the generator would &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; the object &lt;tt class="docutils literal"&gt;{ 1: (9, 2)}&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;nested_cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nested_colspan_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bad_colspans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colspans_to_fix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nested_cs&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the header data and table data are handled separately, &lt;tt class="docutils literal"&gt;headers_only&lt;/tt&gt; extracts only the header data which will be referenced later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;headers_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-for-loop-to-correct-alignment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;Use For Loop to Correct Alignment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This last section essentially loops over the &lt;tt class="docutils literal"&gt;bad_colspans&lt;/tt&gt; list and uses the information contained in it to modify the data container &lt;tt class="docutils literal"&gt;headers_rows&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop starts by iterating over the individual dictionaries in the &lt;tt class="docutils literal"&gt;bad_colspans&lt;/tt&gt; list and then iterating over the keys and values of each dictionary using &lt;tt class="docutils literal"&gt;.items()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;row_index&lt;/tt&gt; is assigned to the &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop variable &lt;tt class="docutils literal"&gt;k&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;row_index&lt;/tt&gt; will be a unique idenifier because row numbers are assigned to each row, starting with the very first header row on down to the very last row of data.&lt;/li&gt;
&lt;li&gt;Because the dictionary values are tuples, two variables are used for each tuple to unpack the tuples and assign a variable to each value in the tuple. The tuple variables are &lt;tt class="docutils literal"&gt;colspan_ind&lt;/tt&gt; (colspan index value) and &lt;tt class="docutils literal"&gt;colspan_val&lt;/tt&gt; (the colspan values).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;colspan_dict&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bad_colspans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colspan_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;row_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
        &lt;span class="n"&gt;colspan_ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colspan_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="give-it-some-space-s"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;Give it Some Space(s)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Continuing down the &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop, you will see two variables with &lt;tt class="docutils literal"&gt;+ 1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;- 1&lt;/tt&gt;. Because the script is structured so that one &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tag will be written to one cell in excel, I gave each data point a default value of 1, unless the &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; explicitly showed, via a &amp;quot;colspan&amp;quot; attribute, that the colspan value was a number greater than 1.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;colspan_minus_one&lt;/tt&gt; is the &lt;tt class="docutils literal"&gt;colspan_val&lt;/tt&gt; variable minus 1. Because each data point has a default colspan value of 1, I subtracted 1 from the larger than 1 colspan values so that the net result is the number of spaces that must be added to the right of the larger-than-1 colspan value.&lt;/li&gt;
&lt;li&gt;Again, using the picture below, labeled &amp;quot;HTML&amp;quot;, the header value &amp;quot;Other Reserve Cap&amp;quot; has a colspan value of 2 and the row beneath it has two &lt;tt class="docutils literal"&gt;td&lt;/tt&gt; tags. In order to avoid the misalignment shown in the &amp;quot;CSV RESULT&amp;quot; table, 1 blank string is added next to &amp;quot;Other Reserve Cap&amp;quot; and the columns are aligned with the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="cell align new two" src="/images/cell_align_new_two.jpg" style="width: 601.2px; height: 357.3px;" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Similarly, because the blank strings are added to the &lt;em&gt;right&lt;/em&gt; of the larger-than-1 colspan values, I &lt;em&gt;add&lt;/em&gt; 1 to the colspan index value.&lt;/li&gt;
&lt;li&gt;Because the code iterates over one table at a time, there is only one set of headers and one set of table data rows for every table &lt;em&gt;and&lt;/em&gt; each table has one continuous index, the &lt;tt class="docutils literal"&gt;row_count&lt;/tt&gt; or as stated in current &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop, the &lt;tt class="docutils literal"&gt;row_index&lt;/tt&gt;. If the &lt;tt class="docutils literal"&gt;row index&lt;/tt&gt; is only found in the &lt;tt class="docutils literal"&gt;headers_only&lt;/tt&gt; list of index values, the &lt;tt class="docutils literal"&gt;headers&lt;/tt&gt; dictionary values are modified by using the &lt;tt class="docutils literal"&gt;.insert()&lt;/tt&gt; method on the variable &lt;tt class="docutils literal"&gt;headers&lt;/tt&gt; to insert a blank string one position to the right of the index value (&lt;tt class="docutils literal"&gt;index_for_insert&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; statement then populates any larger-than-1 colspan values that are present in the table rows or &lt;tt class="docutils literal"&gt;rows&lt;/tt&gt; variable. There are &lt;strong&gt;no&lt;/strong&gt; large colspan values in the actual table rows for this particular website but I have seen them present in other CMBS pages on the SEC website.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;colspan_minus_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colspan_val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;index_for_insert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colspan_ind&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row_index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;headers_only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_minus_one&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index_for_insert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colspan_minus_one&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index_for_insert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-7-write-the-remaining-data-to-csv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id32"&gt;&lt;strong&gt;Part 7: Write the Remaining Data to CSV&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lastly, after the cell alignment issues are taken care of, the &lt;tt class="docutils literal"&gt;write_rows()&lt;/tt&gt; function is used to write the data to a CSV file. Calling the &lt;tt class="docutils literal"&gt;headers_tables()&lt;/tt&gt; with the string arguments 'header' and 'table' will create directories for each and will move the respective files to their directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;write_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tdata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;headers_tables&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;headers_tables&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There should now be, in the directory you ran the script, 19 Header CSV files and 19 Table CSV files. The next post will combine all the CSV files and clean up the data.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="tutorial"></category><category term="beautifulsoup"></category><category term="webscraping"></category></entry></feed>